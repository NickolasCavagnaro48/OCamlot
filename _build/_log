### Starting build.
# Target: types.mli.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:mli, file:types.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules types.mli > types.mli.depends # cached
# Target: types.cmi, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:mli, file:types.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o types.cmi types.mli # cached
# Target: types.ml.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:ml, file:types.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules types.ml > types.ml.depends # cached
# Target: types.cmo, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:types.cmo, file:types.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o types.cmo types.ml
# Target: renderer.mli.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:mli, file:renderer.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules renderer.mli > renderer.mli.depends # cached
# Target: renderer.cmi, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:mli, file:renderer.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o renderer.cmi renderer.mli # cached
# Target: renderer.ml.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:ml, file:renderer.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules renderer.ml > renderer.ml.depends # cached
# Target: renderer.cmo, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:renderer.cmo, file:renderer.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o renderer.cmo renderer.ml
# Target: sprite.mli.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:mli, file:sprite.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules sprite.mli > sprite.mli.depends # cached
# Target: sprite.cmi, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:mli, file:sprite.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o sprite.cmi sprite.mli # cached
# Target: sprite.ml.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:ml, file:sprite.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules sprite.ml > sprite.ml.depends # cached
# Target: sprite.cmo, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:sprite.cmo, file:sprite.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o sprite.cmo sprite.ml
# Target: state.mli.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:mli, file:state.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules state.mli > state.mli.depends # cached
# Target: state.cmi, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:mli, file:state.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o state.cmi state.mli # cached
# Target: state.ml.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:ml, file:state.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules state.ml > state.ml.depends # cached
# Target: state.cmo, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:state.cmo, file:state.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o state.cmo state.ml
# Target: engine.mli.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:mli, file:engine.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules engine.mli > engine.mli.depends # cached
# Target: engine.cmi, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:mli, file:engine.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o engine.cmi engine.mli # cached
# Target: engine.ml.depends, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), extension:ml, file:engine.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -modules engine.ml > engine.ml.depends # cached
# Target: engine.cmo, tags: { package(js_of_ocaml), package(js_of_ocaml-lwt), package(js_of_ocaml.syntax), package(oUnit), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:engine.cmo, file:engine.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -syntax camlp4o -package js_of_ocaml.syntax -package js_of_ocaml -package js_of_ocaml-lwt -package oUnit -o engine.cmo engine.ml
# Compilation successful.
