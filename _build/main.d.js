// Generated by js_of_ocaml 3.0.1
(function(joo_global_object)
   {"use strict";
    function caml_array_append(a1,a2)
     {var l1=a1.length,l2=a2.length,l=l1 + l2 - 1,a=new Array(l);
      a[0] = 0;
      var i=1,j=1;
      for(;i < l1;i++)a[i] = a1[i];
      for(;i < l;i++,j++)a[i] = a2[j];
      return a}
    function caml_array_sub(a,i,len)
     {var a2=new Array(len + 1);
      a2[0] = 0;
      for(var i2=1,i1=i + 1;i2 <= len;i2++,i1++)a2[i2] = a[i1];
      return a2}
    function raw_array_sub(a,i,l)
     {var b=new Array(l);for(var j=0;j < l;j++)b[j] = a[i + j];return b}
    function caml_subarray_to_string(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,raw_array_sub(a,i,Math.min(len,1024)));
      return s}
    function caml_convert_string_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_string(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_string_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    var caml_blit_bytes=caml_blit_string;
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(s.repeat)return s.repeat(n);
      var r="",l=0;
      if(n == 0)return r;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0}
    function caml_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return !/[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 128)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 224)
           {v = c - 12416;if(v < 128)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 240)
               {v = c - 925824;if(v < 2048 || v >= 55295 && v < 57344)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & -64)
                  ==
                  128
                  &&
                  c1
                  <
                  245)
                 {v = c2 - 63447168 + (c << 6);
                  if(v < 65536 || v > 1114111)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 65535)
          t += String.fromCharCode(55232 + (v >> 10),56320 + (v & 1023));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_to_js_string(s)
     {switch(s.t)
       {case 9:return s.c;
        default:caml_convert_string_to_bytes(s);case 0:
         if(caml_is_ascii(s.c)){s.t = 9;return s.c}s.t = 8;
        case 8:return caml_utf16_of_utf8(s.c)
        }}
    function MlString(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlString.prototype.toString = function(){return caml_to_js_string(this)};
    function caml_new_string(s){return new MlString(0,s,s.length)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_new_string(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function raw_array_append_one(a,x)
     {var l=a.length,b=new Array(l + 1),i=0;
      for(;i < l;i++)b[i] = a[i];
      b[i] = x;
      return b}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      var n=f.length,argsLen=args.length,d=n - argsLen;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen
                (f.apply(null,raw_array_sub(args,0,n)),
                 raw_array_sub(args,n,argsLen - n));
       else
        return function(x)
         {return caml_call_gen(f,raw_array_append_one(args,x))}}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.22507385850720138e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_int64_compare(x,y)
     {var x3=x[3] << 16,y3=y[3] << 16;
      if(x3 > y3)return 1;
      if(x3 < y3)return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int_compare(a,b)
     {if(a < b)return -1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?-1:s1.c > s2.c?1:0}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(!(total && a === b))
         if(a instanceof MlString)
          if(b instanceof MlString)
           {if(a !== b){var x=caml_string_compare(a,b);if(x != 0)return x}}
          else
           return 1;
         else
          if(a instanceof Array && a[0] === (a[0] | 0))
           {var ta=a[0];
            if(ta === 254)ta = 0;
            if(ta === 250)
             {a = a[1];continue}
            else
             if(b instanceof Array && b[0] === (b[0] | 0))
              {var tb=b[0];
               if(tb === 254)tb = 0;
               if(tb === 250)
                {b = b[1];continue}
               else
                if(ta != tb)
                 return ta < tb?-1:1;
                else
                 switch(ta)
                  {case 248:
                    var x=caml_int_compare(a[2],b[2]);if(x != 0)return x;break;
                   case 251:caml_invalid_argument("equal: abstract value");
                   case 255:
                    var x=caml_int64_compare(a,b);if(x != 0)return x;break;
                   default:
                    if(a.length != b.length)return a.length < b.length?-1:1;
                    if(a.length > 1)stack.push(a,b,1)}}
             else
              return 1}
          else
           if
            (b instanceof MlString
             ||
             b instanceof Array
             &&
             b[0]
             ===
             (b[0] | 0))
            return -1;
           else
            if(typeof a != "number" && a && a.compare)
             return a.compare(b,total);
            else
             if(typeof a == "function")
              caml_invalid_argument("compare: functional value");
             else
              {if(a < b)return -1;
               if(a > b)return 1;
               if(a != b)
                {if(!total)return NaN;if(a == a)return 1;if(b == b)return -1}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlString(len?2:9,"",len)}
    function caml_equal(x,y){return +(caml_compare_val(x,y,false) == 0)}
    function caml_fill_string(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_string_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    var caml_fill_bytes=caml_fill_string;
    function caml_bytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_parse_format(fmt)
     {fmt = caml_bytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:-1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_new_string(buffer)}
    function caml_format_float(fmt,x)
     {var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == -Infinity){f.sign = -1;x = -x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(!isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = x.toFixed(prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+s.slice(j + 1);
           if(exp < -4 || x >= 1e+21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_bytes_of_string(fmt) == "%d")return caml_new_string("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = -1;i = -i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_greaterequal(x,y)
     {return +(caml_compare_val(x,y,false) >= 0)}
    function caml_greaterthan(x,y){return +(caml_compare_val(x,y,false) > 0)}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 128)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 2048)
         {t += String.fromCharCode(192 | c >> 6);
          t += String.fromCharCode(128 | c & 63)}
        else
         if(c < 55296 || c >= 57343)
          t
          +=
          String.fromCharCode(224 | c >> 12,128 | c >> 6 & 63,128 | c & 63);
         else
          if
           (c
            >=
            56319
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            56320
            ||
            d
            >
            57343)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 56613888;
            t
            +=
            String.fromCharCode
             (240 | c >> 18,128 | c >> 12 & 63,128 | c >> 6 & 63,128 | c & 63)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_js_to_string(s)
     {var tag=9;
      if(!caml_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlString(tag,s,s.length)}
    function caml_hexstring_of_float(x,prec,style)
     {if(!isFinite(x))
       {if(isNaN(x))return caml_js_to_string("nan");
        return caml_js_to_string(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == -Infinity?1:x >= 0?0:1;
      if(sign)x = -x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > -1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_js_to_string
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return (x[3] | x[2] | x[1]) == 0}
    function caml_int64_of_int32(x)
     {return [255,x & 16777215,x >> 24 & 16777215,x >> 31 & 65535]}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_int64_sub(x,y)
     {var
       z1=x[1] - y[1],
       z2=x[2] - y[2] + (z1 >> 24),
       z3=x[3] - y[3] + (z2 >> 24);
      return [255,z1 & 16777215,z2 & 16777215,z3 & 65535]}
    function caml_int64_ucompare(x,y)
     {if(x[3] > y[3])return 1;
      if(x[3] < y[3])return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int64_lsl1(x)
     {x[3] = x[3] << 1 | x[2] >> 23;
      x[2] = (x[2] << 1 | x[1] >> 23) & 16777215;
      x[1] = x[1] << 1 & 16777215}
    function caml_int64_lsr1(x)
     {x[1] = (x[1] >>> 1 | x[2] << 23) & 16777215;
      x[2] = (x[2] >>> 1 | x[3] << 23) & 16777215;
      x[3] = x[3] >>> 1}
    function caml_int64_udivmod(x,y)
     {var
       offset=0,
       modulus=caml_obj_dup(x),
       divisor=caml_obj_dup(y),
       quotient=[255,0,0,0];
      while(caml_int64_ucompare(modulus,divisor) > 0)
       {offset++;caml_int64_lsl1(divisor)}
      while(offset >= 0)
       {offset--;
        caml_int64_lsl1(quotient);
        if(caml_int64_ucompare(modulus,divisor) >= 0)
         {quotient[1]++;modulus = caml_int64_sub(modulus,divisor)}
        caml_int64_lsr1(divisor)}
      return [0,quotient,modulus]}
    function caml_int64_to_int32(x){return x[1] | x[2] << 24}
    function caml_int64_is_negative(x){return x[3] << 16 < 0}
    function caml_int64_neg(x)
     {var y1=-x[1],y2=-x[2] + (y1 >> 24),y3=-x[3] + (y2 >> 24);
      return [255,y1 & 16777215,y2 & 16777215,y3 & 65535]}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = -1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=caml_int64_udivmod(x,wbase);
        x = p[1];
        buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer}
      while
       (!caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_js_from_array(a){return raw_array_sub(a,1,a.length - 1)}
    function caml_js_call(f,o,args)
     {return f.apply(o,caml_js_from_array(args))}
    function caml_js_wrap_callback(f)
     {return function()
       {return arguments.length > 0
                ?caml_call_gen(f,arguments)
                :caml_call_gen(f,[undefined])}}
    function caml_lessthan(x,y){return +(caml_compare_val(x,y,false) < 0)}
    function caml_make_vect(len,init)
     {var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_string_of_array(a){return new MlString(4,a,a.length)}
    var
     caml_md5_string=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 128 << 8 * (i & 3);
           for(i = (i & ~3) + 8;(i & 63) < 60;i += 4)buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 536870911;
           var w=[1732584193,4023233417,2562383102,271733878];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,3614090360);
             d = ff(d,a,b,c,buffer[i + 1],12,3905402710);
             c = ff(c,d,a,b,buffer[i + 2],17,606105819);
             b = ff(b,c,d,a,buffer[i + 3],22,3250441966);
             a = ff(a,b,c,d,buffer[i + 4],7,4118548399);
             d = ff(d,a,b,c,buffer[i + 5],12,1200080426);
             c = ff(c,d,a,b,buffer[i + 6],17,2821735955);
             b = ff(b,c,d,a,buffer[i + 7],22,4249261313);
             a = ff(a,b,c,d,buffer[i + 8],7,1770035416);
             d = ff(d,a,b,c,buffer[i + 9],12,2336552879);
             c = ff(c,d,a,b,buffer[i + 10],17,4294925233);
             b = ff(b,c,d,a,buffer[i + 11],22,2304563134);
             a = ff(a,b,c,d,buffer[i + 12],7,1804603682);
             d = ff(d,a,b,c,buffer[i + 13],12,4254626195);
             c = ff(c,d,a,b,buffer[i + 14],17,2792965006);
             b = ff(b,c,d,a,buffer[i + 15],22,1236535329);
             a = gg(a,b,c,d,buffer[i + 1],5,4129170786);
             d = gg(d,a,b,c,buffer[i + 6],9,3225465664);
             c = gg(c,d,a,b,buffer[i + 11],14,643717713);
             b = gg(b,c,d,a,buffer[i + 0],20,3921069994);
             a = gg(a,b,c,d,buffer[i + 5],5,3593408605);
             d = gg(d,a,b,c,buffer[i + 10],9,38016083);
             c = gg(c,d,a,b,buffer[i + 15],14,3634488961);
             b = gg(b,c,d,a,buffer[i + 4],20,3889429448);
             a = gg(a,b,c,d,buffer[i + 9],5,568446438);
             d = gg(d,a,b,c,buffer[i + 14],9,3275163606);
             c = gg(c,d,a,b,buffer[i + 3],14,4107603335);
             b = gg(b,c,d,a,buffer[i + 8],20,1163531501);
             a = gg(a,b,c,d,buffer[i + 13],5,2850285829);
             d = gg(d,a,b,c,buffer[i + 2],9,4243563512);
             c = gg(c,d,a,b,buffer[i + 7],14,1735328473);
             b = gg(b,c,d,a,buffer[i + 12],20,2368359562);
             a = hh(a,b,c,d,buffer[i + 5],4,4294588738);
             d = hh(d,a,b,c,buffer[i + 8],11,2272392833);
             c = hh(c,d,a,b,buffer[i + 11],16,1839030562);
             b = hh(b,c,d,a,buffer[i + 14],23,4259657740);
             a = hh(a,b,c,d,buffer[i + 1],4,2763975236);
             d = hh(d,a,b,c,buffer[i + 4],11,1272893353);
             c = hh(c,d,a,b,buffer[i + 7],16,4139469664);
             b = hh(b,c,d,a,buffer[i + 10],23,3200236656);
             a = hh(a,b,c,d,buffer[i + 13],4,681279174);
             d = hh(d,a,b,c,buffer[i + 0],11,3936430074);
             c = hh(c,d,a,b,buffer[i + 3],16,3572445317);
             b = hh(b,c,d,a,buffer[i + 6],23,76029189);
             a = hh(a,b,c,d,buffer[i + 9],4,3654602809);
             d = hh(d,a,b,c,buffer[i + 12],11,3873151461);
             c = hh(c,d,a,b,buffer[i + 15],16,530742520);
             b = hh(b,c,d,a,buffer[i + 2],23,3299628645);
             a = ii(a,b,c,d,buffer[i + 0],6,4096336452);
             d = ii(d,a,b,c,buffer[i + 7],10,1126891415);
             c = ii(c,d,a,b,buffer[i + 14],15,2878612391);
             b = ii(b,c,d,a,buffer[i + 5],21,4237533241);
             a = ii(a,b,c,d,buffer[i + 12],6,1700485571);
             d = ii(d,a,b,c,buffer[i + 3],10,2399980690);
             c = ii(c,d,a,b,buffer[i + 10],15,4293915773);
             b = ii(b,c,d,a,buffer[i + 1],21,2240044497);
             a = ii(a,b,c,d,buffer[i + 8],6,1873313359);
             d = ii(d,a,b,c,buffer[i + 15],10,4264355552);
             c = ii(c,d,a,b,buffer[i + 6],15,2734768916);
             b = ii(b,c,d,a,buffer[i + 13],21,1309151649);
             a = ii(a,b,c,d,buffer[i + 4],6,4149444226);
             d = ii(d,a,b,c,buffer[i + 11],10,3174756917);
             c = ii(c,d,a,b,buffer[i + 2],15,718787259);
             b = ii(b,c,d,a,buffer[i + 9],21,3951481745);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 255;
           return t}
         return function(s,ofs,len)
          {var buf=[];
           switch(s.t & 6)
            {default:caml_convert_string_to_bytes(s);case 0:
              var b=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                b.charCodeAt(j)
                |
                b.charCodeAt(j + 1)
                <<
                8
                |
                b.charCodeAt(j + 2)
                <<
                16
                |
                b.charCodeAt(j + 3)
                <<
                24}
              for(;i < len;i++)
               buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3);
              break;
             case 4:
              var a=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
              for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
           return caml_string_of_array(md5(buf,len))}}
       ();
    function caml_ml_bytes_length(s){return s.l}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(!chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(!chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(-1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = name instanceof MlString?name.toString():name;
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_raise_no_such_file(name)
     {name = name instanceof MlString?name.toString():name;
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_string_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_string_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_create_string(len)
     {if(len < 0)caml_invalid_argument("String.create");
      return new MlString(len?2:9,"",len)}
    function caml_ml_string_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_string(len | 0);
      caml_blit_string(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_string_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_string(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_string(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_string(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_string_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(!this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun(caml_new_string(this.root),caml_new_string(name));
        if(res != 0)this.content[name] = new MlFakeFile(res[1])}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=name + "/",r=new RegExp("^" + name_slash);
      for(var n in this.content)if(n.match(r))return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);if(m && !seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_string(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(content instanceof MlString)
       this.content[name] = new MlFakeFile(content);
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_string_of_array(content));
       else
        if(content.toString)
         {var mlstring=caml_new_string(content.toString());
          this.content[name] = new MlFakeFile(mlstring)}};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_array_of_string(s)
     {if(s.t != 4)caml_convert_string_to_array(s);return s.c}
    function caml_string_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_string_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_set(s,i,c)}
    var Buffer=joo_global_object.Buffer;
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len){this.fs.ftruncateSync(this.fd,len | 0)};
    MlNodeFile.prototype.length
    =
    function(){return this.fs.fstatSync(this.fd).size};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(!a instanceof joo_global_object.Uint8Array)
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=new Buffer(a);
      this.fs.writeSync(this.fd,buffer,buf_offset,len,offset);
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(!(a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=new Buffer(a);
      this.fs.readSync(this.fd,buffer,buf_offset,len,offset);
      for(var i=0;i < len;i++)
       caml_string_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var a=new (joo_global_object.Uint8Array)(1),buffer=new Buffer(a);
      this.fs.readSync(this.fd,buffer,0,1,offset);
      return buffer[0]};
    MlNodeFile.prototype.close = function(){this.fs.closeSync(this.fd)};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name){return this.fs.existsSync(this.nm(name))?1:0};
    MlNodeDevice.prototype.readdir
    =
    function(name){return this.fs.readdirSync(this.nm(name))};
    MlNodeDevice.prototype.is_dir
    =
    function(name){return this.fs.statSync(this.nm(name)).isDirectory()?1:0};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {var b=this.fs.existsSync(this.nm(name))?1:0;
      this.fs.unlinkSync(this.nm(name));
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      var fd=this.fs.openSync(this.nm(name),res);
      return new MlNodeFile(fd)};
    MlNodeDevice.prototype.rename
    =
    function(o,n){this.fs.renameSync(this.nm(o),this.nm(n))};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root=caml_current_dir.match(/[^\/]*\//)[0],jsoo_mount_point=[];
    if
     (typeof module
      !==
      "undefined"
      &&
      module.exports
      &&
      typeof require
      !==
      "undefined")
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (!res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_new_string(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(!caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_string(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_string(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_string(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_ml_output(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(!chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var string;
      if(offset == 0 && caml_ml_string_length(buffer) == len)
       string = buffer;
      else
       {string = caml_create_string(len);
        caml_blit_string(buffer,offset,string,0,len)}
      var jsstring=string.toString(),id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output_char(chanid,c)
     {var s=caml_new_string(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_notequal(x,y){return +(caml_compare_val(x,y,false) != 0)}
    function caml_obj_set_tag(x,tag){x[0] = tag;return 0}
    function caml_obj_tag(x)
     {return x instanceof Array?x[0]:x instanceof MlString?252:1e3}
    function caml_register_global(n,v,name_opt)
     {caml_global_data[n + 1] = v;if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_bytes_of_string(nm)] = v;return 0}
    function caml_string_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_sys_const_max_wosize(){return 2147483647 / 4 | 0}
    function caml_sys_get_config(){return [0,caml_new_string("Unix"),32,0]}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=joo_global_object,n=name.toString();
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_js_to_string(g.process.env[n]);
      caml_raise_not_found()}
    function caml_sys_random_seed()
     {var x=new Date() ^ 4294967295 * Math.random();return [0,x]}
    var caml_initial_time=new Date() * 0.001;
    function caml_sys_time(){return new Date() * 0.001 - caml_initial_time}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_js_to_string(String(e))]}
    function unix_inet_addr_of_string(){return 0}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12],
     size=[254,40,40],
     color=[0,0,0,0,1],
     troop_foot_soldier=[0,0,1,50],
     troop_cavalry=[0,1,2,100],
     troop_foot_soldier$0=[0,0,1,100],
     troop_cavalry$0=[0,1,2,200],
     fade_in=[1,0,1,1],
     fade_out=[2,0,1,1],
     fade_out_alpha_0_5=[2,0.5,1,1],
     init_input=[0,[254,0,0],2];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _e_=caml_new_string("%.12g"),
     _d_=caml_new_string("."),
     _b_=caml_new_string("true"),
     _c_=caml_new_string("false"),
     _f_=caml_new_string("hd"),
     _g_=caml_new_string("\\\\"),
     _h_=caml_new_string("\\'"),
     _i_=caml_new_string("\\b"),
     _j_=caml_new_string("\\t"),
     _k_=caml_new_string("\\n"),
     _l_=caml_new_string("\\r"),
     _o_=caml_new_string("String.blit / Bytes.blit_string"),
     _n_=caml_new_string("Bytes.blit"),
     _m_=caml_new_string("String.sub / Bytes.sub"),
     _p_=caml_new_string("String.contains_from / Bytes.contains_from"),
     _q_=caml_new_string("CamlinternalLazy.Undefined"),
     _r_=caml_new_string("Buffer.add: cannot grow buffer"),
     _A_=caml_new_string("%c"),
     _B_=caml_new_string("%s"),
     _C_=caml_new_string("%i"),
     _D_=caml_new_string("%li"),
     _E_=caml_new_string("%ni"),
     _F_=caml_new_string("%Li"),
     _G_=caml_new_string("%f"),
     _H_=caml_new_string("%B"),
     _I_=caml_new_string("%{"),
     _J_=caml_new_string("%}"),
     _K_=caml_new_string("%("),
     _L_=caml_new_string("%)"),
     _M_=caml_new_string("%a"),
     _N_=caml_new_string("%t"),
     _O_=caml_new_string("%?"),
     _P_=caml_new_string("%r"),
     _Q_=caml_new_string("%_r"),
     _R_=[0,caml_new_string("camlinternalFormat.ml"),846,23],
     _aa_=[0,caml_new_string("camlinternalFormat.ml"),810,21],
     _U_=[0,caml_new_string("camlinternalFormat.ml"),811,21],
     _ab_=[0,caml_new_string("camlinternalFormat.ml"),814,21],
     _V_=[0,caml_new_string("camlinternalFormat.ml"),815,21],
     _ac_=[0,caml_new_string("camlinternalFormat.ml"),818,19],
     _W_=[0,caml_new_string("camlinternalFormat.ml"),819,19],
     _ad_=[0,caml_new_string("camlinternalFormat.ml"),822,22],
     _X_=[0,caml_new_string("camlinternalFormat.ml"),823,22],
     _ae_=[0,caml_new_string("camlinternalFormat.ml"),827,30],
     _Y_=[0,caml_new_string("camlinternalFormat.ml"),828,30],
     ___=[0,caml_new_string("camlinternalFormat.ml"),832,26],
     _S_=[0,caml_new_string("camlinternalFormat.ml"),833,26],
     _$_=[0,caml_new_string("camlinternalFormat.ml"),842,28],
     _T_=[0,caml_new_string("camlinternalFormat.ml"),843,28],
     _Z_=[0,caml_new_string("camlinternalFormat.ml"),847,23],
     _bb_=caml_new_string("%u"),
     _a$_=[0,caml_new_string("camlinternalFormat.ml"),1525,4],
     _ba_=caml_new_string("Printf: bad conversion %["),
     _bc_=[0,caml_new_string("camlinternalFormat.ml"),1593,39],
     _bd_=[0,caml_new_string("camlinternalFormat.ml"),1616,31],
     _be_=[0,caml_new_string("camlinternalFormat.ml"),1617,31],
     _bf_=caml_new_string("Printf: bad conversion %_"),
     _bg_=caml_new_string("@{"),
     _bh_=caml_new_string("@["),
     _a9_=caml_new_string("nan"),
     _a__=caml_new_string("."),
     _a7_=caml_new_string("neg_infinity"),
     _a8_=caml_new_string("infinity"),
     _a6_=caml_new_string("%.12g"),
     _aT_=caml_new_string("%nd"),
     _aU_=caml_new_string("%+nd"),
     _aV_=caml_new_string("% nd"),
     _aW_=caml_new_string("%ni"),
     _aX_=caml_new_string("%+ni"),
     _aY_=caml_new_string("% ni"),
     _aZ_=caml_new_string("%nx"),
     _a0_=caml_new_string("%#nx"),
     _a1_=caml_new_string("%nX"),
     _a2_=caml_new_string("%#nX"),
     _a3_=caml_new_string("%no"),
     _a4_=caml_new_string("%#no"),
     _a5_=caml_new_string("%nu"),
     _aG_=caml_new_string("%ld"),
     _aH_=caml_new_string("%+ld"),
     _aI_=caml_new_string("% ld"),
     _aJ_=caml_new_string("%li"),
     _aK_=caml_new_string("%+li"),
     _aL_=caml_new_string("% li"),
     _aM_=caml_new_string("%lx"),
     _aN_=caml_new_string("%#lx"),
     _aO_=caml_new_string("%lX"),
     _aP_=caml_new_string("%#lX"),
     _aQ_=caml_new_string("%lo"),
     _aR_=caml_new_string("%#lo"),
     _aS_=caml_new_string("%lu"),
     _at_=caml_new_string("%Ld"),
     _au_=caml_new_string("%+Ld"),
     _av_=caml_new_string("% Ld"),
     _aw_=caml_new_string("%Li"),
     _ax_=caml_new_string("%+Li"),
     _ay_=caml_new_string("% Li"),
     _az_=caml_new_string("%Lx"),
     _aA_=caml_new_string("%#Lx"),
     _aB_=caml_new_string("%LX"),
     _aC_=caml_new_string("%#LX"),
     _aD_=caml_new_string("%Lo"),
     _aE_=caml_new_string("%#Lo"),
     _aF_=caml_new_string("%Lu"),
     _ag_=caml_new_string("%d"),
     _ah_=caml_new_string("%+d"),
     _ai_=caml_new_string("% d"),
     _aj_=caml_new_string("%i"),
     _ak_=caml_new_string("%+i"),
     _al_=caml_new_string("% i"),
     _am_=caml_new_string("%x"),
     _an_=caml_new_string("%#x"),
     _ao_=caml_new_string("%X"),
     _ap_=caml_new_string("%#X"),
     _aq_=caml_new_string("%o"),
     _ar_=caml_new_string("%#o"),
     _as_=caml_new_string("%u"),
     _s_=caml_new_string("@]"),
     _t_=caml_new_string("@}"),
     _u_=caml_new_string("@?"),
     _v_=caml_new_string("@\n"),
     _w_=caml_new_string("@."),
     _x_=caml_new_string("@@"),
     _y_=caml_new_string("@%"),
     _z_=caml_new_string("@"),
     _af_=caml_new_string("CamlinternalFormat.Type_mismatch"),
     _bj_=caml_new_string("Random.int"),
     _bi_=caml_new_string("x"),
     _bk_=
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
     _pp_=caml_new_string("OCAMLRUNPARAM"),
     _pn_=caml_new_string("CAMLRUNPARAM"),
     _bl_=caml_new_string(""),
     _pm_=caml_new_string("TMPDIR"),
     _pl_=caml_new_string("TEMP"),
     _bn_=caml_new_string("Cygwin"),
     _bo_=caml_new_string("Win32"),
     _bp_=caml_new_string("Js.Error"),
     _bq_=caml_new_string("jsError"),
     _bt_=caml_new_string("canvas"),
     _br_=caml_new_string("img"),
     _bs_=caml_new_string("Dom_html.Canvas_not_available"),
     _by_=caml_new_string("E2BIG"),
     _bA_=caml_new_string("EACCES"),
     _bB_=caml_new_string("EAGAIN"),
     _bC_=caml_new_string("EBADF"),
     _bD_=caml_new_string("EBUSY"),
     _bE_=caml_new_string("ECHILD"),
     _bF_=caml_new_string("EDEADLK"),
     _bG_=caml_new_string("EDOM"),
     _bH_=caml_new_string("EEXIST"),
     _bI_=caml_new_string("EFAULT"),
     _bJ_=caml_new_string("EFBIG"),
     _bK_=caml_new_string("EINTR"),
     _bL_=caml_new_string("EINVAL"),
     _bM_=caml_new_string("EIO"),
     _bN_=caml_new_string("EISDIR"),
     _bO_=caml_new_string("EMFILE"),
     _bP_=caml_new_string("EMLINK"),
     _bQ_=caml_new_string("ENAMETOOLONG"),
     _bR_=caml_new_string("ENFILE"),
     _bS_=caml_new_string("ENODEV"),
     _bT_=caml_new_string("ENOENT"),
     _bU_=caml_new_string("ENOEXEC"),
     _bV_=caml_new_string("ENOLCK"),
     _bW_=caml_new_string("ENOMEM"),
     _bX_=caml_new_string("ENOSPC"),
     _bY_=caml_new_string("ENOSYS"),
     _bZ_=caml_new_string("ENOTDIR"),
     _b0_=caml_new_string("ENOTEMPTY"),
     _b1_=caml_new_string("ENOTTY"),
     _b2_=caml_new_string("ENXIO"),
     _b3_=caml_new_string("EPERM"),
     _b4_=caml_new_string("EPIPE"),
     _b5_=caml_new_string("ERANGE"),
     _b6_=caml_new_string("EROFS"),
     _b7_=caml_new_string("ESPIPE"),
     _b8_=caml_new_string("ESRCH"),
     _b9_=caml_new_string("EXDEV"),
     _b__=caml_new_string("EWOULDBLOCK"),
     _b$_=caml_new_string("EINPROGRESS"),
     _ca_=caml_new_string("EALREADY"),
     _cb_=caml_new_string("ENOTSOCK"),
     _cc_=caml_new_string("EDESTADDRREQ"),
     _cd_=caml_new_string("EMSGSIZE"),
     _ce_=caml_new_string("EPROTOTYPE"),
     _cf_=caml_new_string("ENOPROTOOPT"),
     _cg_=caml_new_string("EPROTONOSUPPORT"),
     _ch_=caml_new_string("ESOCKTNOSUPPORT"),
     _ci_=caml_new_string("EOPNOTSUPP"),
     _cj_=caml_new_string("EPFNOSUPPORT"),
     _ck_=caml_new_string("EAFNOSUPPORT"),
     _cl_=caml_new_string("EADDRINUSE"),
     _cm_=caml_new_string("EADDRNOTAVAIL"),
     _cn_=caml_new_string("ENETDOWN"),
     _co_=caml_new_string("ENETUNREACH"),
     _cp_=caml_new_string("ENETRESET"),
     _cq_=caml_new_string("ECONNABORTED"),
     _cr_=caml_new_string("ECONNRESET"),
     _cs_=caml_new_string("ENOBUFS"),
     _ct_=caml_new_string("EISCONN"),
     _cu_=caml_new_string("ENOTCONN"),
     _cv_=caml_new_string("ESHUTDOWN"),
     _cw_=caml_new_string("ETOOMANYREFS"),
     _cx_=caml_new_string("ETIMEDOUT"),
     _cy_=caml_new_string("ECONNREFUSED"),
     _cz_=caml_new_string("EHOSTDOWN"),
     _cA_=caml_new_string("EHOSTUNREACH"),
     _cB_=caml_new_string("ELOOP"),
     _cC_=caml_new_string("EOVERFLOW"),
     _cD_=
      [0,
       [11,caml_new_string("EUNKNOWNERR "),[4,0,0,0,0]],
       caml_new_string("EUNKNOWNERR %d")],
     _bz_=
      [0,
       [11,
        caml_new_string("Unix.Unix_error(Unix."),
        [2,
         0,
         [11,
          caml_new_string(", "),
          [3,0,[11,caml_new_string(", "),[3,0,[12,41,0]]]]]]],
       caml_new_string("Unix.Unix_error(Unix.%s, %S, %S)")],
     _bu_=caml_new_string("Unix.Unix_error"),
     _bv_=caml_new_string(""),
     _bw_=caml_new_string(""),
     _bx_=caml_new_string("Unix.Unix_error"),
     _cE_=caml_new_string("0.0.0.0"),
     _cF_=caml_new_string("127.0.0.1"),
     _pk_=caml_new_string("::"),
     _pj_=caml_new_string("::1"),
     _cG_=caml_new_string("images/ocamlot_sprites.png"),
     _cH_=[0,72.19,72.19],
     _cI_=[0,0,0],
     _cJ_=[0,72.19,144.38],
     _cK_=[0,143.68,0],
     _cL_=[0,72.19,144.38],
     _cM_=[0,215.87,0],
     _cN_=caml_new_string("images/ocamlot_sprites.png"),
     _cO_=[0,72.19,72.19],
     _cP_=[0,0,0],
     _cQ_=[0,72.19,72.19],
     _cR_=[0,72.19,0],
     _cS_=[0,72.19,72.19],
     _cT_=[0,72.19,72.19],
     _cU_=caml_new_string("images/ocamlot_sprites.png"),
     _cV_=[0,72.19,72.19],
     _cW_=[0,0,72.19],
     _cX_=[0,72.19,72.19],
     _cY_=[0,288.06,0],
     _cZ_=[0,72.19,72.19],
     _c0_=[0,288.06,72.19],
     _c1_=caml_new_string("images/ocamlot_sprites.png"),
     _c2_=[0,72.19,71.63],
     _c3_=[0,0,144.02],
     _c4_=[0,72.19,71.63],
     _c5_=[0,72.19,144.02],
     _c6_=[0,72.19,71.63],
     _c7_=[0,143.92,144.02],
     _c8_=[0,72.19,71.63],
     _c9_=[0,216.21,144.02],
     _c__=caml_new_string("images/ocamlot_sprites.png"),
     _c$_=[0,72.19,71.63],
     _da_=[0,287.84,144.02],
     _db_=[0,72.19,71.63],
     _dc_=[0,360.03,144.02],
     _dd_=[0,72.19,71.63],
     _de_=[0,431.75,144.02],
     _df_=[0,72.19,71.63],
     _dg_=[0,504.04,144.02],
     _dh_=caml_new_string("images/ocamlot_sprites.png"),
     _di_=[0,72.19,71.63],
     _dj_=[0,576.23,144.02],
     _dk_=[0,72.19,71.63],
     _dl_=[0,648.42,144.02],
     _dm_=[0,72.19,71.63],
     _dn_=[0,720.61,144.02],
     _do_=caml_new_string("images/ocamlot_sprites.png"),
     _dp_=[0,72.19,71.63],
     _dq_=[0,792.8,144.02],
     _dr_=[0,72.19,71.63],
     _ds_=[0,864.99,144.02],
     _dt_=[0,72.19,71.63],
     _du_=[0,937.18,144.02],
     _dv_=caml_new_string("images/ocamlot_sprites.png"),
     _dw_=[0,72.19,71.63],
     _dx_=[0,0,215.65],
     _dy_=[0,72.19,71.63],
     _dz_=[0,72.19,215.65],
     _dA_=[0,72.19,71.63],
     _dB_=[0,143.92,215.65],
     _dC_=[0,72.19,71.63],
     _dD_=[0,216.21,215.65],
     _dE_=caml_new_string("images/ocamlot_sprites.png"),
     _dF_=[0,72.19,71.63],
     _dG_=[0,287.84,215.65],
     _dH_=[0,72.19,71.63],
     _dI_=[0,360.03,215.65],
     _dJ_=[0,72.19,71.63],
     _dK_=[0,431.75,215.65],
     _dL_=[0,72.19,71.63],
     _dM_=[0,504.04,215.65],
     _dN_=caml_new_string("images/ocamlot_sprites.png"),
     _dO_=[0,72.19,71.63],
     _dP_=[0,576.23,215.65],
     _dQ_=[0,72.19,71.63],
     _dR_=[0,648.42,215.65],
     _dS_=[0,72.19,71.63],
     _dT_=[0,720.61,215.65],
     _dU_=caml_new_string("images/ocamlot_sprites.png"),
     _dV_=[0,72.19,71.63],
     _dW_=[0,792.8,215.65],
     _dX_=[0,72.19,71.63],
     _dY_=[0,864.99,215.65],
     _dZ_=[0,72.19,71.63],
     _d0_=[0,937.18,215.65],
     _d1_=caml_new_string("images/bkgs/grass_field.jpg"),
     _d2_=[0,540,340],
     _d3_=[0,0,0],
     _d4_=caml_new_string("images/bkgs/cracked_wall.png"),
     _d5_=[0,540,340],
     _d6_=[0,0,0],
     _d7_=caml_new_string("images/ocamlot_sprites.png"),
     _d8_=[0,143.92,104.46],
     _d9_=[0,0,575.74],
     _d__=caml_new_string("images/ocamlot_sprites.png"),
     _d$_=[0,71.96,32.03],
     _ea_=[0,143.92,647.97],
     _eb_=caml_new_string("images/ocamlot_sprites.png"),
     _ec_=[0,71.96,71.63],
     _ed_=[0,143.92,575.74],
     _ee_=caml_new_string("images/ocamlot_sprites.png"),
     _ef_=[0,143.92,71.96],
     _eg_=[0,0,503.79],
     _eh_=[0,143.92,71.96],
     _ei_=[0,143.76,503.79],
     _ej_=[0,143.92,71.96],
     _ek_=[0,0,503.79],
     _el_=caml_new_string("images/ocamlot_sprites.png"),
     _em_=[0,71.96,71.63],
     _en_=[0,215.01,575.74],
     _eo_=[0,71.96,71.63],
     _ep_=[0,288.2,575.74],
     _eq_=[0,71.96,71.63],
     _er_=[0,360.19,575.74],
     _es_=[0,71.96,71.63],
     _et_=[0,432.15,575.74],
     _eu_=caml_new_string("images/lightning.png"),
     _ev_=[0,74.5,127],
     _ew_=[0,0,0],
     _ex_=[0,74.5,127],
     _ey_=[0,74.5,0],
     _ez_=[0,74.5,127],
     _eA_=[0,149,0],
     _eB_=[0,74.5,127],
     _eC_=[0,223.5,0],
     _eD_=[0,74.5,127],
     _eE_=[0,298,0],
     _eF_=[0,74.5,127],
     _eG_=[0,372.5,0],
     _eH_=caml_new_string("images/ocamlot_sprites.png"),
     _eI_=[0,71.96,71.63],
     _eJ_=[0,504.11,575.74],
     _eK_=caml_new_string("images/ocamlot_sprites.png"),
     _eL_=[0,71.96,71.96],
     _eM_=[0,0,431.98],
     _eN_=[0,71.96,71.96],
     _eO_=[0,71.96,431.98],
     _eP_=[0,71.96,71.96],
     _eQ_=[0,143.92,431.98],
     _eR_=[0,71.96,71.96],
     _eS_=[0,216.88,431.98],
     _eT_=[0,71.96,71.96],
     _eU_=[0,288.84,431.98],
     _eV_=caml_new_string("images/ocamlot_sprites.png"),
     _eW_=[0,71.96,71.63],
     _eX_=[0,576.07,575.74],
     _eY_=caml_new_string("images/freeze_spell.png"),
     _eZ_=[0,71.96,71.63],
     _e0_=[0,648.03,575.74],
     _e1_=caml_new_string("images/ocamlot_sprites.png"),
     _e2_=[0,71.96,71.63],
     _e3_=[0,648.03,575.74],
     _fh_=caml_new_string("No more tasks left, updating"),
     _fi_=[0,0,0],
     _fd_=[0,0,0,0,0.5],
     _fe_=[0,255,255,255,1],
     _ff_=caml_new_string("Victory"),
     _fg_=[0,0,0,0,1],
     _fb_=[0,0,0,0,1],
     _fc_=[254,0,0],
     _e__=[0,[0,0,0,0,1],1],
     _e$_=[0,[0,0,0,0,1],2],
     _fa_=[0,[0,100,100,100,1],0],
     _e9_=caml_new_string("px Aniron"),
     _e4_=[0,[4,8,[0,2,2],0,0],caml_new_string("%02X")],
     _e5_=[0,[4,8,[0,2,2],0,0],caml_new_string("%02X")],
     _e6_=[0,[4,8,[0,2,2],0,0],caml_new_string("%02X")],
     _e7_=[0,[4,8,[0,2,2],0,0],caml_new_string("%02X")],
     _e8_=caml_new_string("#"),
     _fj_=caml_new_string("Label property not found: Not a label"),
     _fk_=[254,30,30],
     _fl_=[0,0,0,0,0.25],
     _fm_=caml_new_string("0"),
     _fx_=caml_new_string("fps"),
     _fy_=caml_new_string("player_mana_label"),
     _fz_=caml_new_string("mana: "),
     _fw_=caml_new_string("Updating spell box: "),
     _fr_=caml_new_string("easy"),
     _fs_=caml_new_string("medium"),
     _fp_=caml_new_string("Game"),
     _fq_=caml_new_string("Select Difficulty"),
     _fu_=caml_new_string("GameOver"),
     _fv_=[0,caml_new_string("Game Over")],
     _ft_=[0,caml_new_string("Game")],
     _fo_=[0,0,0],
     _fA_=[0,0,1],
     _fB_=caml_new_string("Failed: "),
     _fC_=caml_new_string("All tests passsed!"),
     _fE_=caml_new_string("test0"),
     _fN_=[254,0,50],
     _fO_=[254,72,72],
     _fL_=[254,0,50],
     _fM_=[254,72,72],
     _fJ_=[254,0,40],
     _fK_=[254,56,56],
     _fF_=[254,10,5],
     _fI_=[254,0,0],
     _fG_=[254,0,100],
     _fH_=[254,72,136],
     _fP_=[254,800,70],
     _fQ_=[254,332,382],
     _fR_=[0,255,255,255,1],
     _fS_=caml_new_string("More ruins to take over"),
     _fT_=caml_new_string("difficulty_label"),
     _fU_=[254,757,527],
     _fW_=[254,325,535],
     _fY_=[254,721,204],
     _f0_=[254,312,204],
     _f2_=[254,1015,338],
     _f4_=[254,61,334],
     _f5_=[254,800,70],
     _f6_=[254,422,355],
     _f7_=[0,255,255,255,1],
     _f8_=caml_new_string("Bigger is better"),
     _f9_=caml_new_string("difficulty_label"),
     _f__=[254,541,387],
     _ga_=[254,492,320],
     _gc_=[254,661,244],
     _ge_=[254,807,373],
     _gg_=[254,672,505],
     _gi_=[254,395,516],
     _gk_=[254,540,91],
     _gm_=[254,257,259],
     _go_=[254,989,114],
     _gq_=[254,49,487],
     _gr_=[254,800,70],
     _gs_=[254,297,339],
     _gt_=[0,255,255,255,1],
     _gu_=caml_new_string("A powerful ruler defends ALL"),
     _gv_=caml_new_string("difficulty_label"),
     _gw_=[254,536,289],
     _gy_=[254,263,522],
     _gA_=[254,311,315],
     _gC_=[254,222,169],
     _gE_=[254,883,579],
     _gG_=[254,718,335],
     _gI_=[254,829,141],
     _gK_=[254,76,275],
     _gM_=[254,996,276],
     _gN_=[254,800,70],
     _gO_=[254,350,339],
     _gP_=[0,255,255,255,1],
     _gQ_=caml_new_string("Need more horsepower..."),
     _gR_=caml_new_string("difficulty_label"),
     _gS_=[254,568,178],
     _gU_=[254,707,552],
     _gW_=[254,786,415],
     _gY_=[254,770,239],
     _g0_=[254,656,121],
     _g2_=[254,376,336],
     _g4_=[254,380,606],
     _g6_=[254,205,491],
     _g8_=[254,130,323],
     _g__=[254,236,153],
     _ha_=[254,51,53],
     _hc_=[254,980,517],
     _hd_=[254,800,70],
     _he_=[254,106,407],
     _hf_=[0,255,255,255,1],
     _hg_=caml_new_string("Rulers are saddled with the lives of their people"),
     _hh_=caml_new_string("difficulty_label"),
     _hi_=[254,554,374],
     _hl_=[254,600,200],
     _ho_=[254,300,200],
     _hr_=[254,0,50],
     _hs_=[254,800,70],
     _ht_=[254,270,407],
     _hu_=[0,255,255,255,1],
     _hv_=caml_new_string("There are many paths to victory"),
     _hw_=caml_new_string("difficulty_label"),
     _hx_=[254,868,356],
     _hz_=[254,655,315],
     _hB_=[254,365,386],
     _hD_=[254,169,311],
     _hF_=[254,857,574],
     _hH_=[254,580,478],
     _hJ_=[254,385,486],
     _hL_=[254,108,547],
     _hN_=[254,880,91],
     _hP_=[254,565,202],
     _hR_=[254,316,192],
     _hT_=[254,135,114],
     _hV_=[254,450,494],
     _hX_=[254,435,45],
     _hY_=[254,800,70],
     _hZ_=[254,290,477],
     _h0_=[0,255,255,255,1],
     _h1_=caml_new_string("IT'S OVER NINE-THOUSAND"),
     _h2_=caml_new_string(""),
     _h3_=[254,800,70],
     _h4_=[254,270,407],
     _h5_=[0,255,255,255,1],
     _h6_=caml_new_string("How difficult is it to be a ruler?"),
     _h7_=caml_new_string(""),
     _h8_=[254,452,488],
     _h__=[254,168,594],
     _ia_=[254,523,289],
     _ic_=[254,779,272],
     _ie_=[254,813,66],
     _ig_=[254,408,72],
     _ii_=[254,890,396],
     _ik_=[254,634,549],
     _im_=[254,283,141],
     _io_=[254,123,296],
     _iq_=[254,780,491],
     _is_=[254,945,501],
     _iu_=[254,839,605],
     _iw_=[254,374,329],
     _iy_=[254,346,205],
     _iA_=[254,165,400],
     _iC_=[254,387,588],
     _iE_=[254,690,628],
     _iG_=[254,912,562],
     _iI_=[254,983,417],
     _iK_=[254,967,281],
     _iM_=[254,855,174],
     _iO_=[254,703,124],
     _iQ_=[254,527,126],
     _iS_=[254,241,227],
     _iU_=[254,73,405],
     _iW_=[254,1019,511],
     _iY_=[254,60,55],
     _iZ_=[254,800,70],
     _i0_=[254,423,407],
     _i1_=[0,255,255,255,1],
     _i2_=caml_new_string("Never give up!"),
     _i3_=caml_new_string(""),
     _i4_=[254,899,98],
     _i6_=[254,920,200],
     _i8_=[254,810,299],
     _i__=[254,679,437],
     _ja_=[254,524,600],
     _jc_=[254,688,109],
     _je_=[254,529,329],
     _jg_=[254,433,433],
     _ji_=[254,364,540],
     _jk_=[254,201,559],
     _jm_=[254,902,363],
     _jo_=[254,664,539],
     _jq_=[254,1041,238],
     _js_=[254,963,269],
     _ju_=[254,908,433],
     _jw_=[254,835,494],
     _jy_=[254,771,486],
     _jA_=[254,716,278],
     _jC_=[254,1021,555],
     _jE_=[254,928,600],
     _jG_=[254,477,243],
     _jI_=[254,251,450],
     _jK_=[254,496,125],
     _jM_=[254,363,246],
     _jO_=[254,329,292],
     _jQ_=[254,264,358],
     _jS_=[254,212,404],
     _jU_=[254,151,482],
     _jW_=[254,149,115],
     _jY_=[254,103,157],
     _j0_=[254,1e3,374],
     _j2_=[254,245,41],
     _j4_=[254,772,538],
     _j6_=[254,67,205],
     _j7_=[254,800,70],
     _j8_=[254,353,407],
     _j9_=[0,255,255,255,1],
     _j__=caml_new_string("You will be remembered"),
     _j$_=caml_new_string(""),
     _ka_=[254,593,344],
     _kc_=[254,744,473],
     _ke_=[254,488,488],
     _kg_=[254,711,275],
     _ki_=[254,492,282],
     _kk_=[254,270,380],
     _km_=[254,384,533],
     _ko_=[254,551,617],
     _kq_=[254,727,601],
     _ks_=[254,846,568],
     _ku_=[254,824,307],
     _kw_=[254,811,162],
     _ky_=[254,632,89],
     _kA_=[254,431,141],
     _kC_=[254,300,287],
     _kE_=[254,835,387],
     _kG_=[254,970,79],
     _kI_=[254,915,249],
     _kK_=[254,995,381],
     _kM_=[254,943,539],
     _kO_=[254,215,414],
     _kQ_=[254,77,504],
     _kS_=[254,112,340],
     _kU_=[254,162,187],
     _kW_=[254,71,87],
     _kX_=[254,800,70],
     _kY_=[254,393,407],
     _kZ_=[0,255,255,255,1],
     _k0_=caml_new_string("A Winner is You!"),
     _k1_=caml_new_string(""),
     _k2_=[254,748,416],
     _k4_=[254,836,415],
     _k6_=[254,912,414],
     _k8_=[254,912,325],
     _k__=[254,748,325],
     _la_=[254,912,221],
     _lc_=[254,836,221],
     _le_=[254,748,221],
     _lg_=[254,586,414],
     _li_=[254,586,365],
     _lk_=[254,586,300],
     _lm_=[254,586,221],
     _lo_=[254,444,414],
     _lq_=[254,444,365],
     _ls_=[254,444,300],
     _lu_=[254,444,221],
     _lw_=[254,148,416],
     _ly_=[254,236,415],
     _lA_=[254,312,414],
     _lC_=[254,312,365],
     _lE_=[254,230,325],
     _lG_=[254,312,300],
     _lI_=[254,312,221],
     _lK_=[254,236,221],
     _lM_=[254,148,221],
     _lO_=[254,919,485],
     _lQ_=[254,752,485],
     _lS_=[254,575,485],
     _lU_=[254,414,485],
     _lW_=[254,260,485],
     _lY_=[254,121,485],
     _l0_=[254,919,81],
     _l2_=[254,752,81],
     _l4_=[254,575,81],
     _l6_=[254,414,81],
     _l8_=[254,260,81],
     _l__=[254,121,81],
     _nQ_=[0,0,0,1],
     _nN_=[0,0,0,2],
     _nK_=[0,1,2,1],
     _nH_=[0,1,2,0],
     _no_=[0,0,0,1],
     _nl_=[0,0,0,2],
     _ni_=[0,1,2,1],
     _nf_=[0,1,2,0],
     _mi_=[254,10,5],
     _mj_=[254,0,100],
     _mk_=[254,72,136],
     _ml_=[254,0,50],
     _mm_=[254,10,5],
     _mn_=[254,0,100],
     _mo_=[254,72,136],
     _mp_=[254,0,50],
     _mq_=[254,0,40],
     _mr_=[254,56,56],
     _ms_=[254,300,200],
     _mt_=[254,0,40],
     _mu_=[254,56,56],
     _mv_=[254,300,200],
     _mw_=[254,0,100],
     _mx_=[254,72,136],
     _my_=[254,0,100],
     _mz_=[254,72,136],
     _mA_=[254,0,1,1],
     _mB_=[254,0,1,7],
     _mC_=[0,5],
     _mD_=[254,0,1,1],
     _mE_=[254,0,1,7],
     _mF_=[0,5],
     _mG_=[254,0,1,2],
     _mH_=[254,0,1,5],
     _mI_=[2,15],
     _mJ_=[254,0,1,2],
     _mK_=[254,0,1,5],
     _mL_=[2,15],
     _mM_=[254,0,1,1],
     _mN_=[254,0,1,40],
     _mO_=[1,1.25],
     _mP_=[254,0,1,1],
     _mQ_=[254,0,1,40],
     _mR_=[1,1.25],
     _mS_=[254,0,1,1],
     _mT_=[254,0,1,40],
     _mU_=[1,0.8],
     _mV_=[254,0,1,1],
     _mW_=[254,0,1,20],
     _mX_=[1,0.8],
     _mZ_=caml_new_string("new_mvmt"),
     _m1_=caml_new_string("nspd_immtbl12"),
     _m3_=caml_new_string("nspd_immtbl11"),
     _m5_=caml_new_string("nspd_immtbl10"),
     _m7_=caml_new_string("nspd_immtbl9"),
     _m9_=caml_new_string("nspd_immtbl8"),
     _m$_=caml_new_string("nspd_immtbl7"),
     _nb_=caml_new_string("nspd_immtbl6"),
     _nd_=caml_new_string("nspd_immtbl5"),
     _ng_=caml_new_string("nspd_immtbl4"),
     _nj_=caml_new_string("nspd_immtbl3"),
     _nm_=caml_new_string("nspd_immtbl2"),
     _np_=caml_new_string("nspd_immtbl1"),
     _nr_=caml_new_string("nst_immtbl12"),
     _nt_=caml_new_string("nst_immtbl8"),
     _nv_=caml_new_string("nst_immtbl11"),
     _nx_=caml_new_string("nst_immtbl7"),
     _nz_=caml_new_string("nst_immtbl10"),
     _nB_=caml_new_string("nst_immtbl6"),
     _nD_=caml_new_string("nst_immtbl9"),
     _nF_=caml_new_string("nst_immtbl5"),
     _nI_=caml_new_string("nst_immtbl4"),
     _nL_=caml_new_string("nst_immtbl3"),
     _nO_=caml_new_string("nst_immtbl2"),
     _nR_=caml_new_string("nst_immtbl1"),
     _nT_=caml_new_string("pssbl_immtbl2"),
     _nV_=caml_new_string("pssbl_immtbl1"),
     _nX_=caml_new_string("immtbl_axiom"),
     _pg_=caml_new_string("State tests suite: "),
     _ph_=caml_new_string("Ai tests suite: "),
     _pf_=[0,-1,0],
     _pd_=caml_new_string("Game"),
     _pe_=caml_new_string("Intro"),
     _pb_=caml_new_string("Switching to "),
     _pc_=caml_new_string("Game"),
     _o9_=caml_new_string("Game"),
     _o__=caml_new_string("Game Over"),
     _o$_=caml_new_string("Intro"),
     _pa_=caml_new_string("Select Difficulty"),
     _o8_=[0,caml_new_string("engine.ml"),321,58],
     _o5_=caml_new_string("}"),
     _o6_=caml_new_string(";y="),
     _o7_=caml_new_string("{x="),
     _nY_=[254,0,1,2],
     _nZ_=[254,0,1,5],
     _n0_=[2,15],
     _n1_=[254,0,1,1],
     _n2_=[254,0,1,20],
     _n3_=[0,7],
     _n4_=[254,0,1,1],
     _n5_=[254,0,1,40],
     _n6_=[1,3],
     _n7_=[254,160,70],
     _n8_=[0,255,255,255,1],
     _n9_=caml_new_string("mana: "),
     _n__=caml_new_string("player_mana_label"),
     _n$_=[254,50,50],
     _oa_=[254,0,0],
     _ob_=caml_new_string("health_spell"),
     _oc_=[254,50,50],
     _od_=[254,0,0],
     _oe_=caml_new_string("freeze_spell"),
     _of_=[254,50,50],
     _og_=[254,0,0],
     _oh_=caml_new_string("lightning_spell"),
     _oi_=[0,caml_new_string("Game")],
     _oj_=[254,200,70],
     _ok_=[0,0,0,0,1],
     _ol_=caml_new_string("Hard"),
     _om_=caml_new_string("hard"),
     _on_=[0,caml_new_string("Game")],
     _oo_=[254,200,70],
     _op_=[0,0,0,0,1],
     _oq_=caml_new_string("Medium"),
     _or_=caml_new_string("medium"),
     _os_=[0,caml_new_string("Game")],
     _ot_=[254,200,70],
     _ou_=[0,0,0,0,1],
     _ov_=caml_new_string("Easy"),
     _ow_=caml_new_string("easy"),
     _ox_=[254,800,70],
     _oy_=[0,0,0,0,1],
     _oz_=caml_new_string("Choose Difficulty"),
     _oA_=caml_new_string("difficulty_label"),
     _oB_=caml_new_string("fps"),
     _oC_=caml_new_string("Select Difficulty"),
     _oD_=caml_new_string("fps"),
     _oE_=caml_new_string("Game"),
     _oF_=[0,caml_new_string("Intro")],
     _oG_=[254,200,70],
     _oH_=[0,0,0,0,1],
     _oI_=caml_new_string("Home"),
     _oJ_=caml_new_string("return"),
     _oK_=[254,160,40],
     _oL_=[0,0,0,0,1],
     _oM_=caml_new_string("Game Over"),
     _oN_=caml_new_string("game_over"),
     _oO_=caml_new_string("fps"),
     _oP_=caml_new_string("Game Over"),
     _oQ_=[254,460,70],
     _oR_=[0,0,0,0,0.7],
     _oS_=caml_new_string("Read Instructions Below"),
     _oT_=caml_new_string("read_intructions_below"),
     _oU_=[254,525,70],
     _oV_=[0,0,0,0,1],
     _oW_=caml_new_string("OCAMLOT"),
     _oX_=caml_new_string("title_label"),
     _oY_=[0,caml_new_string("Select Difficulty")],
     _oZ_=[254,200,70],
     _o0_=[0,0,0,0,1],
     _o1_=caml_new_string("Begin"),
     _o2_=caml_new_string("start"),
     _o3_=caml_new_string("fps"),
     _o4_=caml_new_string("Intro"),
     _pi_=caml_new_string("starting main");
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:-x | 0}
    function _a_(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return s}
    function string_of_bool(b){return b?_b_:_c_}
    function string_of_float(f)
     {var s=caml_format_float(_e_,f),l=caml_ml_string_length(s),i=0;
      for(;;)
       {if(l <= i)return _a_(s,_d_);
        var
         match=caml_string_get(s,i),
         switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
        if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
        return s}}
    function append(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
    caml_ml_open_descriptor_in(0);
    var oc=caml_ml_open_descriptor_out(1);
    caml_ml_open_descriptor_out(2);
    function print_endline(s)
     {caml_ml_output(oc,s,0,caml_ml_string_length(s));
      caml_ml_output_char(oc,10);
      return caml_ml_flush(oc)}
    function do_at_exit(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_wV_)
             {_wV_ = caml_wrap_exception(_wV_);
              if(_wV_[1] !== Sys_error)throw _wV_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function length(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function hd(param){if(param){var a=param[1];return a}return failwith(_f_)}
    function flatten(param)
     {if(param){var r=param[2],l=param[1];return append(l,flatten(r))}
      return 0}
    function map(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map(f,l)]}
      return 0}
    function iter(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var param$1=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=param$1;
          continue}
        return 0}}
    function fold_left(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           a=l$0[1],
           accu$1=caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
        return accu$0}}
    function find_all(p)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1];
            if(caml_call1(p,x))
             {var accu$1=[0,x,accu$0],accu$0=accu$1,param=l;continue}
            var param=l;
            continue}
          var l1=accu$0,l2=0;
          for(;;)
           {if(l1)
             {var l1$0=l1[2],a=l1[1],l2$0=[0,a,l2],l1=l1$0,l2=l2$0;continue}
            return l2}}}}
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function sub_string(b,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(!((caml_ml_bytes_length(b) - len | 0) < ofs))
         {var r=caml_create_bytes(len);
          caml_blit_bytes(b,ofs,r,0,len);
          return r}
      return invalid_arg(_m_)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_bytes_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_n_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_o_)}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function contains_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i)
       if(!(l < i))
        try
         {index_rec(s,l,i,c);var _wT_=1;return _wT_}
        catch(_wU_)
         {_wU_ = caml_wrap_exception(_wU_);
          if(_wU_ === Not_found)return 0;
          throw _wU_}
      return invalid_arg(_p_)}
    function contains(s,c){return contains_from(s,0,c)}
    var
     match=caml_sys_get_config(0),
     os_type=match[1],
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    function copy(a)
     {var l=a.length - 1;return 0 === l?[0]:caml_array_sub(a,0,l)}
    function append$0(a1,a2)
     {var l1=a1.length - 1;
      return 0 === l1
              ?copy(a2)
              :0 === a2.length - 1
                ?caml_array_sub(a1,0,l1)
                :caml_array_append(a1,a2)}
    function iter$0(f,a)
     {var _wR_=a.length - 1 - 1 | 0,_wQ_=0;
      if(!(_wR_ < 0))
       {var i=_wQ_;
        for(;;)
         {caml_call1(f,a[i + 1]);
          var _wS_=i + 1 | 0;
          if(_wR_ !== i){var i=_wS_;continue}
          break}}
      return 0}
    function map$0(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_wO_=l - 1 | 0,_wN_=1;
      if(!(_wO_ < 1))
       {var i=_wN_;
        for(;;)
         {r[i + 1] = caml_call1(f,a[i + 1]);
          var _wP_=i + 1 | 0;
          if(_wO_ !== i){var i=_wP_;continue}
          break}}
      return r}
    function fold_left$0(f,x,a)
     {var r=[0,x],_wL_=a.length - 1 - 1 | 0,_wK_=0;
      if(!(_wL_ < 0))
       {var i=_wK_;
        for(;;)
         {r[1] = caml_call2(f,r[1],a[i + 1]);
          var _wM_=i + 1 | 0;
          if(_wL_ !== i){var i=_wM_;continue}
          break}}
      return r[1]}
    caml_fresh_oo_id(0);
    var Undefined=[248,_q_,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        blk[1] = result;
        caml_obj_set_tag(blk,250);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    function resize(b,more)
     {var len=b[3],new_len=[0,len];
      for(;;)
       {if(new_len[1] < (b[2] + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((b[2] + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_r_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        return 0}}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      blit$0(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    var default_float_precision=-6;
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _wI_=len < min_len?1:0;
      if(_wI_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _wJ_=0}
      else
       var _wJ_=_wI_;
      return _wJ_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var fmtty$1=fmtty$0[1];
           buffer_add_string(buf,_A_);
           var fmtty$0=fmtty$1;
           continue;
          case 1:
           var fmtty$2=fmtty$0[1];
           buffer_add_string(buf,_B_);
           var fmtty$0=fmtty$2;
           continue;
          case 2:
           var fmtty$3=fmtty$0[1];
           buffer_add_string(buf,_C_);
           var fmtty$0=fmtty$3;
           continue;
          case 3:
           var fmtty$4=fmtty$0[1];
           buffer_add_string(buf,_D_);
           var fmtty$0=fmtty$4;
           continue;
          case 4:
           var fmtty$5=fmtty$0[1];
           buffer_add_string(buf,_E_);
           var fmtty$0=fmtty$5;
           continue;
          case 5:
           var fmtty$6=fmtty$0[1];
           buffer_add_string(buf,_F_);
           var fmtty$0=fmtty$6;
           continue;
          case 6:
           var fmtty$7=fmtty$0[1];
           buffer_add_string(buf,_G_);
           var fmtty$0=fmtty$7;
           continue;
          case 7:
           var fmtty$8=fmtty$0[1];
           buffer_add_string(buf,_H_);
           var fmtty$0=fmtty$8;
           continue;
          case 8:
           var fmtty$9=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_I_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_J_);
           var fmtty$0=fmtty$9;
           continue;
          case 9:
           var fmtty$10=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_K_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_L_);
           var fmtty$0=fmtty$10;
           continue;
          case 10:
           var fmtty$11=fmtty$0[1];
           buffer_add_string(buf,_M_);
           var fmtty$0=fmtty$11;
           continue;
          case 11:
           var fmtty$12=fmtty$0[1];
           buffer_add_string(buf,_N_);
           var fmtty$0=fmtty$12;
           continue;
          case 12:
           var fmtty$13=fmtty$0[1];
           buffer_add_string(buf,_O_);
           var fmtty$0=fmtty$13;
           continue;
          case 13:
           var fmtty$14=fmtty$0[1];
           buffer_add_string(buf,_P_);
           var fmtty$0=fmtty$14;
           continue;
          default:
           var fmtty$15=fmtty$0[1];
           buffer_add_string(buf,_Q_);
           var fmtty$0=fmtty$15;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _wk_=function(param){return 0},
         _wl_=function(param){return 0},
         _wm_=function(param){return 0};
        return [0,function(param){return 0},_wm_,_wl_,_wk_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _wn_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_wn_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _wo_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _wo_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _wp_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _wp_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _wq_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _wq_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _wr_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _wr_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _ws_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _ws_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _wt_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _wt_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _wu_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _wu_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _wv_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _wv_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _ww_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _wx_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _wy_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _wy_,
                  _wx_,
                  _ww_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _wz_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _wz_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _wA_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _wA_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _wB_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _wB_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _wC_=function(param){caml_call1(de$12,0);return 0},
           _wD_=function(param){caml_call1(ed$12,0);return 0},
           _wE_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _wE_,
                  _wD_,
                  _wC_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _wF_=function(param){caml_call1(de$13,0);return 0},
           _wG_=function(param){caml_call1(ed$13,0);return 0},
           _wH_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _wH_,
                  _wG_,
                  _wF_]}}
    function trans(ty1,match)
     {if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:var switch$0=0;break;
          case 11:var switch$0=1;break;
          case 12:var switch$0=2;break;
          case 13:var switch$0=3;break;
          case 14:var switch$0=4;break;
          case 8:var switch$0=5;break;
          case 9:var switch$0=6;break;
          default:throw [0,Assert_failure,_R_]}
      else
       switch(ty1[0])
        {case 0:
          var _v3_=ty1[1];
          if(typeof match === "number")
           var switch$1=1;
          else
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_v3_,rest2)];
             case 8:var switch$0=5,switch$1=0;break;
             case 9:var switch$0=6,switch$1=0;break;
             case 10:var switch$0=0,switch$1=0;break;
             case 11:var switch$0=1,switch$1=0;break;
             case 12:var switch$0=2,switch$1=0;break;
             case 13:var switch$0=3,switch$1=0;break;
             case 14:var switch$0=4,switch$1=0;break;
             default:var switch$1=1}
          if(switch$1)var switch$0=7;
          break;
         case 1:
          var _v4_=ty1[1];
          if(typeof match === "number")
           var switch$2=1;
          else
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_v4_,rest2$0)];
             case 8:var switch$0=5,switch$2=0;break;
             case 9:var switch$0=6,switch$2=0;break;
             case 10:var switch$0=0,switch$2=0;break;
             case 11:var switch$0=1,switch$2=0;break;
             case 12:var switch$0=2,switch$2=0;break;
             case 13:var switch$0=3,switch$2=0;break;
             case 14:var switch$0=4,switch$2=0;break;
             default:var switch$2=1}
          if(switch$2)var switch$0=7;
          break;
         case 2:
          var _v5_=ty1[1];
          if(typeof match === "number")
           var switch$3=1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_v5_,rest2$1)];
             case 8:var switch$0=5,switch$3=0;break;
             case 9:var switch$0=6,switch$3=0;break;
             case 10:var switch$0=0,switch$3=0;break;
             case 11:var switch$0=1,switch$3=0;break;
             case 12:var switch$0=2,switch$3=0;break;
             case 13:var switch$0=3,switch$3=0;break;
             case 14:var switch$0=4,switch$3=0;break;
             default:var switch$3=1}
          if(switch$3)var switch$0=7;
          break;
         case 3:
          var _v6_=ty1[1];
          if(typeof match === "number")
           var switch$4=1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_v6_,rest2$2)];
             case 8:var switch$0=5,switch$4=0;break;
             case 9:var switch$0=6,switch$4=0;break;
             case 10:var switch$0=0,switch$4=0;break;
             case 11:var switch$0=1,switch$4=0;break;
             case 12:var switch$0=2,switch$4=0;break;
             case 13:var switch$0=3,switch$4=0;break;
             case 14:var switch$0=4,switch$4=0;break;
             default:var switch$4=1}
          if(switch$4)var switch$0=7;
          break;
         case 4:
          var _v7_=ty1[1];
          if(typeof match === "number")
           var switch$5=1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_v7_,rest2$3)];
             case 8:var switch$0=5,switch$5=0;break;
             case 9:var switch$0=6,switch$5=0;break;
             case 10:var switch$0=0,switch$5=0;break;
             case 11:var switch$0=1,switch$5=0;break;
             case 12:var switch$0=2,switch$5=0;break;
             case 13:var switch$0=3,switch$5=0;break;
             case 14:var switch$0=4,switch$5=0;break;
             default:var switch$5=1}
          if(switch$5)var switch$0=7;
          break;
         case 5:
          var _v8_=ty1[1];
          if(typeof match === "number")
           var switch$6=1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_v8_,rest2$4)];
             case 8:var switch$0=5,switch$6=0;break;
             case 9:var switch$0=6,switch$6=0;break;
             case 10:var switch$0=0,switch$6=0;break;
             case 11:var switch$0=1,switch$6=0;break;
             case 12:var switch$0=2,switch$6=0;break;
             case 13:var switch$0=3,switch$6=0;break;
             case 14:var switch$0=4,switch$6=0;break;
             default:var switch$6=1}
          if(switch$6)var switch$0=7;
          break;
         case 6:
          var _v9_=ty1[1];
          if(typeof match === "number")
           var switch$7=1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_v9_,rest2$5)];
             case 8:var switch$0=5,switch$7=0;break;
             case 9:var switch$0=6,switch$7=0;break;
             case 10:var switch$0=0,switch$7=0;break;
             case 11:var switch$0=1,switch$7=0;break;
             case 12:var switch$0=2,switch$7=0;break;
             case 13:var switch$0=3,switch$7=0;break;
             case 14:var switch$0=4,switch$7=0;break;
             default:var switch$7=1}
          if(switch$7)var switch$0=7;
          break;
         case 7:
          var _v__=ty1[1];
          if(typeof match === "number")
           var switch$8=1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_v__,rest2$6)];
             case 8:var switch$0=5,switch$8=0;break;
             case 9:var switch$0=6,switch$8=0;break;
             case 10:var switch$0=0,switch$8=0;break;
             case 11:var switch$0=1,switch$8=0;break;
             case 12:var switch$0=2,switch$8=0;break;
             case 13:var switch$0=3,switch$8=0;break;
             case 14:var switch$0=4,switch$8=0;break;
             default:var switch$8=1}
          if(switch$8)var switch$0=7;
          break;
         case 8:
          var _v$_=ty1[2],_wa_=ty1[1];
          if(typeof match === "number")
           var switch$9=1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_wb_=trans(_v$_,rest2$7);
              return [8,trans(_wa_,ty2),_wb_];
             case 10:var switch$0=0,switch$9=0;break;
             case 11:var switch$0=1,switch$9=0;break;
             case 12:var switch$0=2,switch$9=0;break;
             case 13:var switch$0=3,switch$9=0;break;
             case 14:var switch$0=4,switch$9=0;break;
             default:var switch$9=1}
          if(switch$9)throw [0,Assert_failure,___];
          break;
         case 9:
          var _wc_=ty1[3],_wd_=ty1[2],_we_=ty1[1];
          if(typeof match === "number")
           var switch$10=1;
          else
           switch(match[0])
            {case 8:var switch$0=5,switch$10=0;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_wd_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_we_,ty22,trans(_wc_,rest2$8)];
             case 10:var switch$0=0,switch$10=0;break;
             case 11:var switch$0=1,switch$10=0;break;
             case 12:var switch$0=2,switch$10=0;break;
             case 13:var switch$0=3,switch$10=0;break;
             case 14:var switch$0=4,switch$10=0;break;
             default:var switch$10=1}
          if(switch$10)throw [0,Assert_failure,_$_];
          break;
         case 10:
          var _wf_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_wf_,rest2$9)]}
          throw [0,Assert_failure,_aa_];
         case 11:
          var _wg_=ty1[1];
          if(typeof match === "number")
           var switch$11=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$11=0;break;
             case 11:var rest2$10=match[1];return [11,trans(_wg_,rest2$10)];
             default:var switch$11=1}
          if(switch$11)throw [0,Assert_failure,_ab_];
          break;
         case 12:
          var _wh_=ty1[1];
          if(typeof match === "number")
           var switch$12=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$12=0;break;
             case 11:var switch$0=1,switch$12=0;break;
             case 12:var rest2$11=match[1];return [12,trans(_wh_,rest2$11)];
             default:var switch$12=1}
          if(switch$12)throw [0,Assert_failure,_ac_];
          break;
         case 13:
          var _wi_=ty1[1];
          if(typeof match === "number")
           var switch$13=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$13=0;break;
             case 11:var switch$0=1,switch$13=0;break;
             case 12:var switch$0=2,switch$13=0;break;
             case 13:var rest2$12=match[1];return [13,trans(_wi_,rest2$12)];
             default:var switch$13=1}
          if(switch$13)throw [0,Assert_failure,_ad_];
          break;
         default:
          var _wj_=ty1[1];
          if(typeof match === "number")
           var switch$14=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$14=0;break;
             case 11:var switch$0=1,switch$14=0;break;
             case 12:var switch$0=2,switch$14=0;break;
             case 13:var switch$0=3,switch$14=0;break;
             case 14:var rest2$13=match[1];return [14,trans(_wj_,rest2$13)];
             default:var switch$14=1}
          if(switch$14)throw [0,Assert_failure,_ae_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_U_];
        case 1:throw [0,Assert_failure,_V_];
        case 2:throw [0,Assert_failure,_W_];
        case 3:throw [0,Assert_failure,_X_];
        case 4:throw [0,Assert_failure,_Y_];
        case 5:throw [0,Assert_failure,_S_];
        case 6:throw [0,Assert_failure,_T_];
        default:throw [0,Assert_failure,_Z_]}}
    var Type_mismatch=[248,_af_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _v2_=match[2];
        if(typeof _v2_ !== "number" && 2 === _v2_[0])
         {var rest$0=_v2_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw Type_mismatch}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _vx_=type_padding(pad,fmtty),
           _vy_=_vx_[2],
           _vz_=_vx_[1];
          if(typeof _vy_ !== "number" && 1 === _vy_[0])
           {var
             fmtty_rest$1=_vy_[1],
             match$1=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_vz_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _vA_=type_padding(pad$0,fmtty),
           _vB_=_vA_[2],
           _vC_=_vA_[1];
          if(typeof _vB_ !== "number" && 1 === _vB_[0])
           {var
             fmtty_rest$2=_vB_[1],
             match$2=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_vC_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _vD_=type_padprec(pad$1,prec,fmtty),
           _vE_=_vD_[3],
           _vF_=_vD_[2],
           _vG_=_vD_[1];
          if(typeof _vE_ !== "number" && 2 === _vE_[0])
           {var
             fmtty_rest$3=_vE_[1],
             match$3=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_vG_,_vF_,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _vH_=type_padprec(pad$2,prec$0,fmtty),
           _vI_=_vH_[3],
           _vJ_=_vH_[2],
           _vK_=_vH_[1];
          if(typeof _vI_ !== "number" && 3 === _vI_[0])
           {var
             fmtty_rest$4=_vI_[1],
             match$4=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_vK_,_vJ_,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _vL_=type_padprec(pad$3,prec$1,fmtty),
           _vM_=_vL_[3],
           _vN_=_vL_[2],
           _vO_=_vL_[1];
          if(typeof _vM_ !== "number" && 4 === _vM_[0])
           {var
             fmtty_rest$5=_vM_[1],
             match$5=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_vO_,_vN_,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _vP_=type_padprec(pad$4,prec$2,fmtty),
           _vQ_=_vP_[3],
           _vR_=_vP_[2],
           _vS_=_vP_[1];
          if(typeof _vQ_ !== "number" && 5 === _vQ_[0])
           {var
             fmtty_rest$6=_vQ_[1],
             match$6=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_vS_,_vR_,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _vT_=type_padprec(pad$5,prec$3,fmtty),
           _vU_=_vT_[3],
           _vV_=_vT_[2],
           _vW_=_vT_[1];
          if(typeof _vU_ !== "number" && 6 === _vU_[0])
           {var
             fmtty_rest$7=_vU_[1],
             match$7=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_vW_,_vV_,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           _vX_=type_padding(pad$6,fmtty),
           _vY_=_vX_[2],
           _vZ_=_vX_[1];
          if(typeof _vY_ !== "number" && 7 === _vY_[0])
           {var
             fmtty_rest$8=_vY_[1],
             match$8=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,_vZ_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$12=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _v0_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_v0_))
             throw Type_mismatch;
            var
             match$13=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=type_format_gen(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _v1_=type_ignored_format_substitution(sub_fmtty$3,rest,fmtty),
               match$27=_v1_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_v1_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substitution(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substitution(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substitution
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substitution
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substitution
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substitution
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substitution
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substitution
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substitution
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substitution
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _vv_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_vv_))
             throw Type_mismatch;
            var _vw_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_vw_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substitution
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substitution
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substitution
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substitution
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substitution
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _vu_=2 === padty$0?48:32,res=make(width$0,_vu_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         if(0 < len)
          {if(43 === caml_string_get(str,0))
            var switch$1=1;
           else
            if(45 === caml_string_get(str,0))
             var switch$1=1;
            else
             if(32 === caml_string_get(str,0))
              var switch$1=1;
             else
              var switch$0=0,switch$1=0;
           if(switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0);
             var switch$0=1}}
         else
          var switch$0=0;
         if(!switch$0)
          {if(1 < len)
            if(48 === caml_string_get(str,0))
             {if(120 === caml_string_get(str,1))
               var switch$3=1;
              else
               if(88 === caml_string_get(str,1))
                var switch$3=1;
               else
                var switch$2=0,switch$3=0;
              if(switch$3)
               {caml_bytes_set(res,1,caml_string_get(str,1));
                blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0);
                var switch$2=1}}
            else
             var switch$2=0;
           else
            var switch$2=0;
           if(!switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return res}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0);
      if(58 <= c)
       var switch$0=71 <= c?5 < (c - 97 | 0) >>> 0?1:0:65 <= c?0:1;
      else
       {if(32 === c)
         var switch$1=1;
        else
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0))
               if(1 < len)
                {var
                  switch$2=
                   120 === caml_string_get(str,1)
                    ?0
                    :88 === caml_string_get(str,1)?0:1;
                 if(!switch$2)
                  {var res$1=make(prec$0 + 2 | 0,48);
                   caml_bytes_set(res$1,1,caml_string_get(str,1));
                   blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                   return res$1}}
              var switch$0=0,switch$1=0;
              break;
             case 0:
             case 2:var switch$1=1;break;
             case 1:
             case 3:
             case 4:var switch$0=1,switch$1=0;break;
             default:var switch$0=0,switch$1=0}}
         else
          var switch$0=1,switch$1=0;
        if(switch$1)
         {if(len < (prec$0 + 1 | 0))
           {var res$0=make(prec$0 + 1 | 0,48);
            caml_bytes_set(res$0,0,c);
            blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
            return res$0}
          var switch$0=1}}
      if(!switch$0)
       if(len < prec$0)
        {var res=make(prec$0,48);
         blit$0(str,0,res,prec$0 - len | 0,len);
         return res}
      return str}
    function string_to_caml_string(str)
     {var i$1=0;
      for(;;)
       {if(caml_ml_string_length(str) <= i$1)
         var _vt_=0;
        else
         {var match$0=caml_string_unsafe_get(str,i$1);
          if(32 <= match$0)
           {var _vs_=match$0 - 34 | 0;
            if(58 < _vs_ >>> 0)
             if(93 <= _vs_)var switch$0=0,switch$1=0;else var switch$1=1;
            else
             if(56 < (_vs_ - 1 | 0) >>> 0)
              var switch$0=1,switch$1=0;
             else
              var switch$1=1;
            if(switch$1){var i$2=i$1 + 1 | 0,i$1=i$2;continue}}
          else
           var switch$0=11 <= match$0?13 === match$0?1:0:8 <= match$0?1:0;
          var _vt_=switch$0?1:1}
        if(_vt_)
         {var n=[0,0],_vl_=caml_ml_bytes_length(str) - 1 | 0,_vk_=0;
          if(!(_vl_ < 0))
           {var i$0=_vk_;
            for(;;)
             {var match=caml_string_unsafe_get(str,i$0);
              if(32 <= match)
               {var _vp_=match - 34 | 0;
                if(58 < _vp_ >>> 0)
                 if(93 <= _vp_)var switch$2=0,switch$3=0;else var switch$3=1;
                else
                 if(56 < (_vp_ - 1 | 0) >>> 0)
                  var switch$2=1,switch$3=0;
                 else
                  var switch$3=1;
                if(switch$3)var _vq_=1,switch$2=2}
              else
               var switch$2=11 <= match?13 === match?1:0:8 <= match?1:0;
              switch(switch$2)
               {case 0:var _vq_=4;break;case 1:var _vq_=2;break}
              n[1] = n[1] + _vq_ | 0;
              var _vr_=i$0 + 1 | 0;
              if(_vl_ !== i$0){var i$0=_vr_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(str))
           {var len=caml_ml_bytes_length(str),r=caml_create_bytes(len);
            caml_blit_bytes(str,0,r,0,len);
            var str$0=r}
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _vn_=caml_ml_bytes_length(str) - 1 | 0,_vm_=0;
            if(!(_vn_ < 0))
             {var i=_vm_;
              for(;;)
               {var c=caml_string_unsafe_get(str,i);
                if(35 <= c)
                 var switch$4=92 === c?1:127 <= c?0:2;
                else
                 if(32 <= c)
                  var switch$4=34 <= c?1:2;
                 else
                  if(14 <= c)
                   var switch$4=0;
                  else
                   switch(c)
                    {case 8:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],98);
                      var switch$4=3;
                      break;
                     case 9:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],116);
                      var switch$4=3;
                      break;
                     case 10:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],110);
                      var switch$4=3;
                      break;
                     case 13:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],114);
                      var switch$4=3;
                      break;
                     default:var switch$4=0}
                switch(switch$4)
                 {case 0:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 1:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],c);
                   break;
                  case 2:caml_string_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _vo_=i + 1 | 0;
                if(_vn_ !== i){var i=_vo_;continue}
                break}}
            var str$0=s}}
        else
         var str$0=str;
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return res}}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 0:var _vj_=_ag_;break;
        case 1:var _vj_=_ah_;break;
        case 2:var _vj_=_ai_;break;
        case 3:var _vj_=_aj_;break;
        case 4:var _vj_=_ak_;break;
        case 5:var _vj_=_al_;break;
        case 6:var _vj_=_am_;break;
        case 7:var _vj_=_an_;break;
        case 8:var _vj_=_ao_;break;
        case 9:var _vj_=_ap_;break;
        case 10:var _vj_=_aq_;break;
        case 11:var _vj_=_ar_;break;
        default:var _vj_=_as_}
      return caml_format_int(_vj_,n)}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 0:var _vi_=_aG_;break;
        case 1:var _vi_=_aH_;break;
        case 2:var _vi_=_aI_;break;
        case 3:var _vi_=_aJ_;break;
        case 4:var _vi_=_aK_;break;
        case 5:var _vi_=_aL_;break;
        case 6:var _vi_=_aM_;break;
        case 7:var _vi_=_aN_;break;
        case 8:var _vi_=_aO_;break;
        case 9:var _vi_=_aP_;break;
        case 10:var _vi_=_aQ_;break;
        case 11:var _vi_=_aR_;break;
        default:var _vi_=_aS_}
      return caml_format_int(_vi_,n)}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 0:var _vh_=_aT_;break;
        case 1:var _vh_=_aU_;break;
        case 2:var _vh_=_aV_;break;
        case 3:var _vh_=_aW_;break;
        case 4:var _vh_=_aX_;break;
        case 5:var _vh_=_aY_;break;
        case 6:var _vh_=_aZ_;break;
        case 7:var _vh_=_a0_;break;
        case 8:var _vh_=_a1_;break;
        case 9:var _vh_=_a2_;break;
        case 10:var _vh_=_a3_;break;
        case 11:var _vh_=_a4_;break;
        default:var _vh_=_a5_}
      return caml_format_int(_vh_,n)}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 0:var _vg_=_at_;break;
        case 1:var _vg_=_au_;break;
        case 2:var _vg_=_av_;break;
        case 3:var _vg_=_aw_;break;
        case 4:var _vg_=_ax_;break;
        case 5:var _vg_=_ay_;break;
        case 6:var _vg_=_az_;break;
        case 7:var _vg_=_aA_;break;
        case 8:var _vg_=_aB_;break;
        case 9:var _vg_=_aC_;break;
        case 10:var _vg_=_aD_;break;
        case 11:var _vg_=_aE_;break;
        default:var _vg_=_aF_}
      return caml_int64_format(_vg_,n)}
    function convert_float(fconv,prec$0,x)
     {if(16 <= fconv)
       {if(17 <= fconv)
         switch(fconv - 17 | 0)
          {case 2:var switch$0=0;break;
           case 0:
           case 3:var sign=43,switch$0=1;break;
           default:var sign=32,switch$0=1}
        else
         var switch$0=0;
        if(!switch$0)var sign=45;
        var s=caml_hexstring_of_float(x,prec$0,sign);
        if(19 <= fconv)
         {var l=caml_ml_bytes_length(s);
          if(0 === l)return s;
          var r=caml_create_bytes(l),_va_=l - 1 | 0,_u$_=0;
          if(!(_va_ < 0))
           {var i=_u$_;
            for(;;)
             {var c=caml_string_unsafe_get(s,i);
              if(97 <= c)
               if(122 < c)var switch$1=0;else var _vb_=c - 32 | 0,switch$1=1;
              else
               var switch$1=0;
              if(!switch$1)var _vb_=c;
              caml_string_unsafe_set(r,i,_vb_);
              var _vc_=i + 1 | 0;
              if(_va_ !== i){var i=_vc_;continue}
              break}}
          return r}
        return s}
      if(15 === fconv)
       var _vd_=_a6_;
      else
       {var prec=abs(prec$0);
        switch(fconv)
         {case 15:var symb=70;break;
          case 0:
          case 1:
          case 2:var symb=102;break;
          case 3:
          case 4:
          case 5:var symb=101;break;
          case 6:
          case 7:
          case 8:var symb=69;break;
          case 9:
          case 10:
          case 11:var symb=103;break;
          case 12:
          case 13:
          case 14:var symb=71;break;
          case 16:
          case 17:
          case 18:var symb=104;break;
          default:var symb=72}
        var buf=buffer_create(16);
        buffer_add_char(buf,37);
        switch(fconv)
         {case 1:
          case 4:
          case 7:
          case 10:
          case 13:
          case 17:
          case 20:buffer_add_char(buf,43);break;
          case 2:
          case 5:
          case 8:
          case 11:
          case 14:
          case 18:
          case 21:buffer_add_char(buf,32);break
          }
        buffer_add_char(buf,46);
        buffer_add_string(buf,caml_new_string("" + prec));
        buffer_add_char(buf,symb);
        var _vd_=buffer_contents(buf)}
      var str=caml_format_float(_vd_,x);
      if(15 === fconv)
       {var len=caml_ml_string_length(str),match$0=caml_classify_float(x);
        if(3 === match$0)return x < 0?_a7_:_a8_;
        if(4 <= match$0)return _a9_;
        var i$0=0;
        for(;;)
         {if(i$0 === len)
           var _vf_=0;
          else
           {var
             match=caml_string_get(str,i$0),
             _ve_=match - 46 | 0,
             switch$2=
              23 < _ve_ >>> 0?55 === _ve_?1:0:21 < (_ve_ - 1 | 0) >>> 0?1:0;
            if(!switch$2){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
            var _vf_=1}
          return _vf_?str:_a_(str,_a__)}}
      return str}
    function make_int_padding_precision(k,o,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,o,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _u8_=pad[2],_u9_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=fix_padding(_u9_,_u8_,caml_call2(trans,iconv,x));
                      return make_printf(k,o,[4,acc,str],fmt)}
                   :function(p,x)
                     {var
                       str=
                        fix_padding
                         (_u9_,_u8_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,o,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_u9_,_u8_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,o,[4,acc,str],fmt)}}
        var _u__=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=fix_padding(_u__,w,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_u__,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_u__,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,o,[4,acc,str],fmt)}}}
    function make_padding(k,o,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,o,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,o,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,o,new_acc,fmt)}}}
    function make_printf$0(counter,k,o,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call2(k$0,o,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,o,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {if(40 <= c)
              if(92 === c)
               var str=_g_,switch$0=2;
              else
               var switch$0=127 <= c?0:1;
             else
              if(32 <= c)
               if(39 <= c)var str=_h_,switch$0=2;else var switch$0=1;
              else
               if(14 <= c)
                var switch$0=0;
               else
                switch(c)
                 {case 8:var str=_i_,switch$0=2;break;
                  case 9:var str=_j_,switch$0=2;break;
                  case 10:var str=_k_,switch$0=2;break;
                  case 13:var str=_l_,switch$0=2;break;
                  default:var switch$0=0}
             switch(switch$0)
              {case 0:
                var s=caml_create_bytes(4);
                caml_string_unsafe_set(s,0,92);
                caml_string_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_string_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_string_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=s;
                break;
               case 1:
                var s$0=caml_create_bytes(1);
                caml_string_unsafe_set(s$0,0,c);
                var str=s$0;
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,res];
             return make_printf(k$0,o,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding
                   (k$0,o,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,o,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var str=convert_float(fconv,default_float_precision,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _u4_=pad$5[2],_u5_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var
                            str=convert_float(fconv,default_float_precision,x),
                            str$0=fix_padding(_u5_,_u4_,str);
                           return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=fix_padding(_u5_,_u4_,convert_float(fconv,p,x));
                           return make_printf(k$0,o,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_u5_,_u4_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
             var _u6_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision,x),
                          str$0=fix_padding(_u6_,w,str);
                         return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=fix_padding(_u6_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_u6_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,o,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str)
            {return make_printf(k$0,o,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _u7_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _u7_[2] === "number")
              {var fmt=_u7_[1];
               return make_printf(k$0,o,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      o,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,o,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _u2_=fmt$0[1];
           if(0 === _u2_[0])
            {var
              rest$13=fmt$0[2],
              match=_u2_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(koc,kacc)
                  {return make_printf(k,koc,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_u2_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(koc,kacc)
                {return make_printf(k,koc,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_a$_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_ba_];
           return function(param){return make_printf(k$0,o,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bb_,n)];
             return make_printf(k$0,o,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];
             return make_printf(k$0,o,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 2:throw [0,Assert_failure,_bc_];
              default:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 8:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,o,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,o,acc$0,fmtty$0,rest$18]);
              case 10:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _u3_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,o,acc$0,rest$19,arity,_u3_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,o,acc$0,rest$19,arity,_u3_])}}
    function make_from_fmtty$0(counter,k,o,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,o,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,o,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,o,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_u1_)
           {return make_from_fmtty(k,o,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bd_];
         default:throw [0,Assert_failure,_be_]}}
    function make_invalid_arg(counter,k,o,acc,fmt)
     {var _u0_=[8,acc,_bf_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_u0_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_u0_,fmt])}
    function make_custom$0(counter,k,o,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,o,acc,rest,arity$0,caml_call1(f,x))}}
      var _uZ_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_uZ_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_uZ_,rest])}
    function make_printf(k,o,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,o,acc,fmt))}
    function make_from_fmtty(k,o,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,o,acc,fmtty,fmt))}
    function make_custom(k,o,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,o,acc,rest,arity,f))}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var fmting_lit=acc$0[2],p=acc$0[1];
           if(typeof fmting_lit === "number")
            switch(fmting_lit)
             {case 0:var s=_s_;break;
              case 1:var s=_t_;break;
              case 2:var s=_u_;break;
              case 3:var s=_v_;break;
              case 4:var s=_w_;break;
              case 5:var s=_x_;break;
              default:var s=_y_}
           else
            switch(fmting_lit[0])
             {case 0:var str=fmting_lit[1],s=str;break;
              case 1:var str$0=fmting_lit[1],s=str$0;break;
              default:var c=fmting_lit[1],s=_a_(_z_,make(1,c))}
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _uX_=acc$0[2],_uY_=acc$0[1];
           if(0 === _uX_[0])
            {var acc$1=_uX_[1];
             strput_acc(b,_uY_);
             add_string(b,_bg_);
             var acc$0=acc$1;
             continue}
           var acc$2=_uX_[1];
           strput_acc(b,_uY_);
           add_string(b,_bh_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c$0=acc$0[2],p$1=acc$0[1];
           strput_acc(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)resize(b,1);
           caml_string_unsafe_set(b[1],pos,c$0);
           b[2] = pos + 1 | 0;
           return 0}}
    function sprintf(fmt$0)
     {var fmt=fmt$0[1];
      function k(param,acc)
       {var
         n$0=64,
         n=max_string_length < 64?max_string_length:n$0,
         s=caml_create_bytes(n),
         buf=[0,s,0,n,s];
        strput_acc(buf,acc);
        return sub_string(buf[1],0,buf[2])}
      return make_printf(k,0,0,fmt)}
    var printers=[0,0];
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    function bits(s)
     {s[2] = (s[2] + 1 | 0) % 55 | 0;
      var
       _uU_=s[2],
       curval=caml_check_bound(s[1],_uU_)[_uU_ + 1],
       _uV_=(s[2] + 24 | 0) % 55 | 0,
       newval=
        caml_check_bound(s[1],_uV_)[_uV_ + 1]
        +
        (curval ^ (curval >>> 25 | 0) & 31)
        |
        0,
       newval30=newval & 1073741823,
       _uW_=s[2];
      caml_check_bound(s[1],_uW_)[_uW_ + 1] = newval30;
      return newval30}
    var s=[0,_bk_.slice(),0];
    function float$0(scale)
     {var r1=bits(s),r2=bits(s);
      return (r1 / 1073741824 + r2) / 1073741824 * scale}
    try
     {var _pq_=caml_sys_getenv(_pp_),params=_pq_}
    catch(_uS_)
     {_uS_ = caml_wrap_exception(_uS_);
      if(_uS_ !== Not_found)throw _uS_;
      try
       {var _po_=caml_sys_getenv(_pn_),_bm_=_po_}
      catch(_uT_)
       {_uT_ = caml_wrap_exception(_uT_);
        if(_uT_ !== Not_found)throw _uT_;
        var _bm_=_bl_}
      var params=_bm_}
    var
     randomized_default=contains(params,82),
     prng=
      [246,
       function(_uR_)
        {var
          seed$0=caml_sys_random_seed(0),
          result=[0,caml_make_vect(55,0),0],
          seed=0 === seed$0.length - 1?[0,0]:seed$0,
          l=seed.length - 1,
          i$0=0;
         for(;;)
          {caml_check_bound(result[1],i$0)[i$0 + 1] = i$0;
           var _uQ_=i$0 + 1 | 0;
           if(54 !== i$0){var i$0=_uQ_;continue}
           var accu=[0,_bi_],_uM_=54 + max(55,l) | 0,_uL_=0;
           if(!(_uM_ < 0))
            {var i=_uL_;
             for(;;)
              {var
                j=i % 55 | 0,
                k=caml_mod(i,l),
                x=caml_check_bound(seed,k)[k + 1],
                str=_a_(accu[1],caml_new_string("" + x));
               accu[1] = caml_md5_string(str,0,caml_ml_string_length(str));
               var
                _uN_=accu[1],
                _uH_=caml_string_get(_uN_,3) << 24,
                _uI_=caml_string_get(_uN_,2) << 16,
                _uJ_=caml_string_get(_uN_,1) << 8,
                _uK_=
                 ((caml_string_get(_uN_,0) + _uJ_ | 0) + _uI_ | 0)
                 +
                 _uH_
                 |
                 0,
                _uO_=
                 (caml_check_bound(result[1],j)[j + 1] ^ _uK_)
                 &
                 1073741823;
               caml_check_bound(result[1],j)[j + 1] = _uO_;
               var _uP_=i + 1 | 0;
               if(_uM_ !== i){var i=_uP_;continue}
               break}}
           result[2] = 0;
           return result}}];
    function create(opt,initial_size)
     {if(opt)var sth=opt[1],random=sth;else var random=randomized_default;
      var x=16;
      for(;;)
       {if(!(initial_size <= x))
         if(!(max_array_length < (x * 2 | 0)))
          {var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         var
          _uF_=caml_obj_tag(prng),
          _uG_=250 === _uF_?prng[1]:246 === _uF_?force_lazy_block(prng):prng,
          seed=bits(_uG_);
        else
         var seed=0;
        return [0,0,caml_make_vect(x,0),seed,x]}}
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    try
     {caml_sys_getenv(_pm_)}
    catch(_uE_)
     {_uE_ = caml_wrap_exception(_uE_);if(_uE_ !== Not_found)throw _uE_}
    try
     {caml_sys_getenv(_pl_)}
    catch(_uD_)
     {_uD_ = caml_wrap_exception(_uD_);if(_uD_ !== Not_found)throw _uD_}
    var
     switch$0=
      caml_string_notequal(os_type,_bn_)
       ?caml_string_notequal(os_type,_bo_)?1:0
       :0,
     window=joo_global_object,
     no_handler=null,
     undefined$0=undefined;
    function test(x){return 1 - (x == no_handler?1:0)}
    var
     true$0=true,
     array_constructor=window.Array,
     Error=[248,_bp_,caml_fresh_oo_id(0)];
    register_exception(_bq_,[0,Error,{}]);
    (function(exn){throw exn});
    register_printer
     (function(param)
       {if(param[1] === Error)
         {var e=param[2];return [0,caml_js_to_string(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_constructor
                ?0
                :[0,caml_js_to_string(e.toString())]});
    function handler(f)
     {return function(e)
       {if(test(e))
         {var res=caml_call1(f,e);
          if(1 - (res | 0))e.preventDefault();
          return res}
        var e$0=event,res$0=caml_call1(f,e$0);
        if(1 - (res$0 | 0))e$0.returnValue = res$0;
        return res$0}}
    function addEventListener(e,typ,h,capt)
     {if(e.addEventListener === undefined$0)
       {var
         ev="on".concat(typ),
         callback=
          function(e)
           {var _uA_=[0,h,e,[0]];
            return function(_uB_,_uC_){return caml_js_call(_uA_,_uB_,_uC_)}};
        e.attachEvent(ev,callback);
        return function(param){return e.detachEvent(ev,callback)}}
      e.addEventListener(typ,h,capt);
      return function(param){return e.removeEventListener(typ,h,capt)}}
    var
     mousedown="mousedown",
     mouseup="mouseup",
     mousemove="mousemove",
     doc=window.document,
     jsoo_6d9ac43e="2d";
    function unsafeCreateElement(doc,name)
     {return doc.createElement(name.toString())}
    var Canvas_not_available=[248,_bs_,caml_fresh_oo_id(0)];
    function createCanvas(doc)
     {var c=unsafeCreateElement(doc,_bt_);
      if(1 - test(c.getContext))throw Canvas_not_available;
      return c}
    var html_element=window.HTMLElement;
    html_element === undefined$0;
    var Unix_error=[248,_bu_,caml_fresh_oo_id(0)];
    register_exception(_bx_,[0,Unix_error,0,_bw_,_bv_]);
    register_printer
     (function(param)
       {if(param[1] === Unix_error)
         {var s=param[4],s$0=param[3],e=param[2];
          if(typeof e === "number")
           {var _uz_=e;
            if(34 <= _uz_)
             switch(_uz_)
              {case 34:var msg=_b7_;break;
               case 35:var msg=_b8_;break;
               case 36:var msg=_b9_;break;
               case 37:var msg=_b__;break;
               case 38:var msg=_b$_;break;
               case 39:var msg=_ca_;break;
               case 40:var msg=_cb_;break;
               case 41:var msg=_cc_;break;
               case 42:var msg=_cd_;break;
               case 43:var msg=_ce_;break;
               case 44:var msg=_cf_;break;
               case 45:var msg=_cg_;break;
               case 46:var msg=_ch_;break;
               case 47:var msg=_ci_;break;
               case 48:var msg=_cj_;break;
               case 49:var msg=_ck_;break;
               case 50:var msg=_cl_;break;
               case 51:var msg=_cm_;break;
               case 52:var msg=_cn_;break;
               case 53:var msg=_co_;break;
               case 54:var msg=_cp_;break;
               case 55:var msg=_cq_;break;
               case 56:var msg=_cr_;break;
               case 57:var msg=_cs_;break;
               case 58:var msg=_ct_;break;
               case 59:var msg=_cu_;break;
               case 60:var msg=_cv_;break;
               case 61:var msg=_cw_;break;
               case 62:var msg=_cx_;break;
               case 63:var msg=_cy_;break;
               case 64:var msg=_cz_;break;
               case 65:var msg=_cA_;break;
               case 66:var msg=_cB_;break;
               default:var msg=_cC_}
            else
             switch(_uz_)
              {case 0:var msg=_by_;break;
               case 1:var msg=_bA_;break;
               case 2:var msg=_bB_;break;
               case 3:var msg=_bC_;break;
               case 4:var msg=_bD_;break;
               case 5:var msg=_bE_;break;
               case 6:var msg=_bF_;break;
               case 7:var msg=_bG_;break;
               case 8:var msg=_bH_;break;
               case 9:var msg=_bI_;break;
               case 10:var msg=_bJ_;break;
               case 11:var msg=_bK_;break;
               case 12:var msg=_bL_;break;
               case 13:var msg=_bM_;break;
               case 14:var msg=_bN_;break;
               case 15:var msg=_bO_;break;
               case 16:var msg=_bP_;break;
               case 17:var msg=_bQ_;break;
               case 18:var msg=_bR_;break;
               case 19:var msg=_bS_;break;
               case 20:var msg=_bT_;break;
               case 21:var msg=_bU_;break;
               case 22:var msg=_bV_;break;
               case 23:var msg=_bW_;break;
               case 24:var msg=_bX_;break;
               case 25:var msg=_bY_;break;
               case 26:var msg=_bZ_;break;
               case 27:var msg=_b0_;break;
               case 28:var msg=_b1_;break;
               case 29:var msg=_b2_;break;
               case 30:var msg=_b3_;break;
               case 31:var msg=_b4_;break;
               case 32:var msg=_b5_;break;
               default:var msg=_b6_}}
          else
           var x=e[1],msg=caml_call1(sprintf(_cD_),x);
          return [0,caml_call3(sprintf(_bz_),msg,s$0,s)]}
        return 0});
    unix_inet_addr_of_string(_cE_);
    unix_inet_addr_of_string(_cF_);
    try
     {unix_inet_addr_of_string(_pk_)}
    catch(_uy_)
     {_uy_ = caml_wrap_exception(_uy_);if(_uy_[1] !== Failure)throw _uy_}
    try
     {unix_inet_addr_of_string(_pj_)}
    catch(_ux_)
     {_ux_ = caml_wrap_exception(_ux_);if(_ux_[1] !== Failure)throw _ux_}
    create(0,7);
    function point_inside(point,pos,size)
     {var _ut_=pos[1] <= point[1]?1:0;
      if(_ut_)
       {var _uu_=pos[2] <= point[2]?1:0;
        if(_uu_)
         var
          _uv_=point[1] <= pos[1] + size[1]?1:0,
          _uw_=_uv_?point[2] <= pos[2] + size[2]?1:0:_uv_;
        else
         var _uw_=_uu_}
      else
       var _uw_=_ut_;
      return _uw_}
    function add_vector2d(p1,p2){return [254,p1[1] + p2[1],p1[2] + p2[2]]}
    function scalar_mult_vector2d(c,p){return [254,p[1] * c,p[2] * c]}
    function init_sprite(sheet_src,time_delay)
     {var img=unsafeCreateElement(doc,_br_);
      img.src = sheet_src.toString();
      return [0,[0],img,0,time_delay,float$0(time_delay)]}
    function add_animation_frame(param,_us_,sprite)
     {var
       h=_us_[2],
       w=_us_[1],
       y=param[2],
       x=param[1],
       new_frames=append$0(sprite[1],[0,[0,[254,x,y],[254,w,h]]]);
      return [0,new_frames,sprite[2],sprite[3],sprite[4],sprite[5]]}
    function set_animation_frame(i,sp){return [0,sp[1],sp[2],i,sp[4],sp[5]]}
    function tick(sp,delta)
     {return sp[4] <= sp[5]
              ?sp[1].length - 1 <= (sp[3] + 1 | 0)
                ?[0,sp[1],sp[2],0,sp[4],0]
                :[0,sp[1],sp[2],sp[3] + 1 | 0,sp[4],0]
              :[0,sp[1],sp[2],sp[3],sp[4],sp[5] + delta]}
    var
     tower_base=
      add_animation_frame
       (_cM_,
        _cL_,
        add_animation_frame
         (_cK_,_cJ_,add_animation_frame(_cI_,_cH_,init_sprite(_cG_,0.5)))),
     tower_type1=
      add_animation_frame
       (_cT_,
        _cS_,
        add_animation_frame
         (_cR_,_cQ_,add_animation_frame(_cP_,_cO_,init_sprite(_cN_,0)))),
     tower_type2=
      add_animation_frame
       (_c0_,
        _cZ_,
        add_animation_frame
         (_cY_,_cX_,add_animation_frame(_cW_,_cV_,init_sprite(_cU_,0)))),
     blue_troop1_right=
      add_animation_frame
       (_c9_,
        _c8_,
        add_animation_frame
         (_c7_,
          _c6_,
          add_animation_frame
           (_c5_,_c4_,add_animation_frame(_c3_,_c2_,init_sprite(_c1_,0.08))))),
     blue_troop1_left=
      add_animation_frame
       (_dg_,
        _df_,
        add_animation_frame
         (_de_,
          _dd_,
          add_animation_frame
           (_dc_,_db_,add_animation_frame(_da_,_c$_,init_sprite(_c__,0.08))))),
     blue_troop2_left=
      add_animation_frame
       (_dn_,
        _dm_,
        add_animation_frame
         (_dl_,_dk_,add_animation_frame(_dj_,_di_,init_sprite(_dh_,0.08)))),
     blue_troop2_right=
      add_animation_frame
       (_du_,
        _dt_,
        add_animation_frame
         (_ds_,_dr_,add_animation_frame(_dq_,_dp_,init_sprite(_do_,0.08)))),
     red_troop1_right=
      add_animation_frame
       (_dD_,
        _dC_,
        add_animation_frame
         (_dB_,
          _dA_,
          add_animation_frame
           (_dz_,_dy_,add_animation_frame(_dx_,_dw_,init_sprite(_dv_,0.08))))),
     red_troop1_left=
      add_animation_frame
       (_dM_,
        _dL_,
        add_animation_frame
         (_dK_,
          _dJ_,
          add_animation_frame
           (_dI_,_dH_,add_animation_frame(_dG_,_dF_,init_sprite(_dE_,0.08))))),
     red_troop2_left=
      add_animation_frame
       (_dT_,
        _dS_,
        add_animation_frame
         (_dR_,_dQ_,add_animation_frame(_dP_,_dO_,init_sprite(_dN_,0.08)))),
     red_troop2_right=
      add_animation_frame
       (_d0_,
        _dZ_,
        add_animation_frame
         (_dY_,_dX_,add_animation_frame(_dW_,_dV_,init_sprite(_dU_,0.08)))),
     grass_background=add_animation_frame(_d3_,_d2_,init_sprite(_d1_,0)),
     cracked_background=add_animation_frame(_d6_,_d5_,init_sprite(_d4_,0)),
     tower_highlight=add_animation_frame(_d9_,_d8_,init_sprite(_d7_,0)),
     tower_troop_count_sprite=
      add_animation_frame(_ea_,_d$_,init_sprite(_d__,0)),
     mvmt_troop_count_sprite=
      add_animation_frame(_ed_,_ec_,init_sprite(_eb_,0)),
     menu_btn_sprite1=
      add_animation_frame
       (_ek_,
        _ej_,
        add_animation_frame
         (_ei_,_eh_,add_animation_frame(_eg_,_ef_,init_sprite(_ee_,0)))),
     spell_btn_sprite=
      add_animation_frame
       (_et_,
        _es_,
        add_animation_frame
         (_er_,
          _eq_,
          add_animation_frame
           (_ep_,_eo_,add_animation_frame(_en_,_em_,init_sprite(_el_,0))))),
     sprite_lightning=
      add_animation_frame
       (_eG_,
        _eF_,
        add_animation_frame
         (_eE_,
          _eD_,
          add_animation_frame
           (_eC_,
            _eB_,
            add_animation_frame
             (_eA_,
              _ez_,
              add_animation_frame
               (_ey_,
                _ex_,
                add_animation_frame(_ew_,_ev_,init_sprite(_eu_,0.05))))))),
     sprite_lightning_icon=add_animation_frame(_eJ_,_eI_,init_sprite(_eH_,0)),
     sprite_freeze=
      add_animation_frame
       (_eU_,
        _eT_,
        add_animation_frame
         (_eS_,
          _eR_,
          add_animation_frame
           (_eQ_,
            _eP_,
            add_animation_frame
             (_eO_,_eN_,add_animation_frame(_eM_,_eL_,init_sprite(_eK_,0.18)))))),
     sprite_freeze_icon=add_animation_frame(_eX_,_eW_,init_sprite(_eV_,0.05));
    add_animation_frame(_e0_,_eZ_,init_sprite(_eY_,0.05));
    var
     sprite_heart_icon=add_animation_frame(_e3_,_e2_,init_sprite(_e1_,0.05)),
     time=[0,0],
     fps=[0,0],
     delta=[0,0],
     last_update_time=[0,0],
     frames_count=[0,0],
     time_count=[0,0],
     width=1080,
     height=680;
    function color_to_hex(param)
     {var
       a=param[4],
       b=param[3],
       g=param[2],
       r=param[1],
       _up_=caml_call1(sprintf(_e4_),a * 255 | 0),
       _uq_=_a_(caml_call1(sprintf(_e5_),b),_up_),
       _ur_=_a_(caml_call1(sprintf(_e6_),g),_uq_);
      return _a_(_e8_,_a_(caml_call1(sprintf(_e7_),r),_ur_)).toString()}
    function draw_sprite_sheet(ctx,sprite,pos,size)
     {var _uo_=sprite[3],frame=caml_check_bound(sprite[1],_uo_)[_uo_ + 1];
      ctx.drawImage
       (sprite[2],
        frame[1][1],
        frame[1][2],
        frame[2][1],
        frame[2][2],
        pos[1],
        pos[2],
        size[1],
        size[2]);
      return 0}
    function draw_text(ctx,text,pos,color,font_size)
     {ctx.fillStyle = color_to_hex(color);
      ctx.font = _a_(caml_new_string("" + font_size),_e9_).toString();
      ctx.fillText(text.toString(),pos[1],pos[2]);
      return 0}
    function draw_ui(context,interface$0)
     {iter
       (function(param)
         {var ui_elmt=param[2],_uj_=ui_elmt[1];
          switch(_uj_[0])
           {case 0:
             var size=_uj_[3],pos=_uj_[2],btn_prop=_uj_[1];
             switch(btn_prop[1])
              {case 0:
                var sprite_to_draw=set_animation_frame(2,btn_prop[2]);break;
               case 1:
                var sprite_to_draw=set_animation_frame(0,btn_prop[2]);break;
               case 2:
                var sprite_to_draw=set_animation_frame(1,btn_prop[2]);break;
               default:var sprite_to_draw=set_animation_frame(0,btn_prop[2])}
             draw_sprite_sheet(context,sprite_to_draw,pos,size);
             var
              _uk_=btn_prop[3][3],
              _ul_=btn_prop[3][2],
              _um_=add_vector2d(pos,btn_prop[4]);
             draw_text(context,btn_prop[3][1],_um_,_ul_,_uk_);
             return 0;
            case 1:
             var pos$0=_uj_[2],prop=_uj_[1];
             draw_text(context,prop[1],pos$0,prop[2],prop[3]);
             return 0;
            case 2:
             var size$0=_uj_[3],pos$1=_uj_[2],sprite=_uj_[1];
             draw_sprite_sheet(context,sprite,pos$1,size$0);
             return 0;
            default:
             var size$1=_uj_[3],pos$2=_uj_[2],prop$0=_uj_[1];
             switch(prop$0[1])
              {case 0:var match=[0,set_animation_frame(0,prop$0[2]),1];break;
               case 1:var match=[0,set_animation_frame(1,prop$0[2]),1];break;
               case 2:var match=[0,set_animation_frame(2,prop$0[2]),0];break;
               default:var match=[0,set_animation_frame(3,prop$0[2]),1]}
             var draw_icon=match[2],sprite_to_draw$0=match[1];
             draw_sprite_sheet(context,sprite_to_draw$0,pos$2,size$1);
             var _un_=prop$0[3];
             if(0 !== draw_icon)
              if(_un_)
               {var front_sprite=_un_[1];
                draw_sprite_sheet
                 (context,front_sprite,add_vector2d(pos$2,prop$0[4]),size$1)}
             return 0}},
        interface$0);
      return 0}
    function find_ui_ref(interface$0,id)
     {var param$0=interface$0;
      for(;;)
       {if(param$0)
         {var
           l$0=param$0[2],
           match$0=param$0[1],
           a$0=match$0[1],
           _uh_=0 === caml_compare(a$0,id)?1:0;
          if(!_uh_){var param$0=l$0;continue}
          var _ui_=_uh_}
        else
         var _ui_=0;
        if(_ui_)
         {var param=interface$0;
          for(;;)
           {if(param)
             {var l=param[2],match=param[1],b=match[2],a=match[1];
              if(0 === caml_compare(a,id))return [0,b];
              var param=l;
              continue}
            throw Not_found}}
        return 0}}
    function get_label_prop(label)
     {if(1 === label[0]){var prop=label[1];return prop}return failwith(_fj_)}
    var fps_label=[1,[0,_fm_,_fl_,20],[254,1050,30],_fk_];
    function _fn_(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var l1$1=l1$0[2],h=l1$0[1],l2$1=[0,h,l2$0],l1$0=l1$1,l2$0=l2$1;
          continue}
        return l2$0}}
    var difficulty_level=[0,0],destination=[0,0,0];
    function new_movement(ts_index,te_index,troops,sprite,side,damage,speed)
     {return [0,ts_index,te_index,troops,sprite,side,0,damage,speed]}
    function possible_commands(st,side)
     {var
       _t$_=st[1],
       _ua_=0,
       side_twr_list=
        fold_left$0
         (function(acc,e)
           {if(e[9] === side)if(!e[12])return [0,e[1],acc];return acc},
          _ua_,
          _t$_),
       _ub_=st[1],
       _uc_=0,
       opp_twr_list=
        fold_left$0
         (function(acc,e){return e[9] !== side?[0,e[1],acc]:acc},_uc_,_ub_),
       _ud_=st[1],
       _ue_=0,
       neutral_twr_list=
        fold_left$0
         (function(acc,e){return 2 === e[9]?[0,e[1],acc]:acc},_ue_,_ud_);
      function f(lst1,lst2,acc1)
       {var lst2$0=lst2,acc1$0=acc1;
        a:
        for(;;)
         {if(lst2$0)
           {var lst2$1=lst2$0[2],l1=lst1,acc2=0;
            for(;;)
             {if(l1)
               if(lst2$0)
                {var
                  h2=lst2$0[1],
                  l1$0=l1[2],
                  h1=l1[1],
                  acc2$0=[0,[0,h1,h2],acc2],
                  l1=l1$0,
                  acc2=acc2$0;
                 continue}
              var acc1$1=_fn_(acc2,acc1$0),lst2$0=lst2$1,acc1$0=acc1$1;
              continue a}}
          return acc1$0}}
      if(0 < length(neutral_twr_list))
       var
        _uf_=f(side_twr_list,neutral_twr_list,0),
        indices_list=
         caml_call1
          (find_all
            (function(param){var t=param[2],h=param[1];return h !== t?1:0}),
           _uf_);
      else
       var
        _ug_=f(side_twr_list,_fn_(opp_twr_list,side_twr_list),0),
        indices_list=
         caml_call1
          (find_all
            (function(param){var t=param[2],h=param[1];return h !== t?1:0}),
           _ug_);
      var
       param$3=
        map
         (function(param){var t=param[2],h=param[1];return [0,side,h,t]},
          indices_list),
       l=[0,0,param$3];
      if(l)
       {var accu=0,param=l;
        for(;;)
         {if(param)
           {var
             param$0=param[2],
             accu$0=accu + 1 | 0,
             accu=accu$0,
             param=param$0;
            continue}
          var a=caml_make_vect(accu,0),i=1,param$1=param$3;
          for(;;)
           {if(param$1)
             {var param$2=param$1[2],hd=param$1[1];
              a[i + 1] = hd;
              var i$0=i + 1 | 0,i=i$0,param$1=param$2;
              continue}
            return a}}}
      return [0]}
    function new_state(st,c)
     {if(typeof c === "number")
       return st;
      else
       {if(0 === c[0])
         {var
           finish=c[3],
           start=c[2],
           team=c[1],
           init=caml_check_bound(st[1],start)[start + 1],
           ts_team_original=init[9];
          if(2 !== ts_team_original)
           if(start !== finish)
            if(ts_team_original === team)
             if(!caml_check_bound(st[1],start)[start + 1][12])
              {var
                mvmt_troop_count=[0,0],
                half=init[6] / 2 | 0,
                _tQ_=init[12],
                _tR_=init[11],
                _tS_=init[10],
                _tT_=init[9],
                _tU_=init[8],
                _tV_=init[7];
               mvmt_troop_count[1] = half;
               var
                _tW_=0 < half?init[6] - half:init[6],
                ts=
                 [0,
                  init[1],
                  init[2],
                  init[3],
                  init[4],
                  init[5],
                  _tW_,
                  _tV_,
                  _tU_,
                  _tT_,
                  _tS_,
                  _tR_,
                  _tQ_],
                _tX_=st[1],
                start_tower=caml_check_bound(_tX_,start)[start + 1],
                end_tower=caml_check_bound(_tX_,finish)[finish + 1];
               switch(ts_team_original)
                {case 0:
                  var
                   sp=
                    0 === start_tower[5][1]
                     ?start_tower[2][1] < end_tower[2][1]
                       ?blue_troop1_right
                       :blue_troop1_left
                     :start_tower[2][1] < end_tower[2][1]
                       ?blue_troop2_right
                       :blue_troop2_left;
                  break;
                 case 1:
                  var
                   sp=
                    0 === start_tower[5][1]
                     ?start_tower[2][1] < end_tower[2][1]
                       ?red_troop1_right
                       :red_troop1_left
                     :start_tower[2][1] < end_tower[2][1]
                       ?red_troop2_right
                       :red_troop2_left;
                  break;
                 default:var sp=blue_troop1_left}
               var
                _tY_=caml_check_bound(st[1],start)[start + 1][5][3],
                _tZ_=caml_check_bound(st[1],start)[start + 1][5][2],
                new_mvmt=
                 new_movement
                  (start,
                   finish,
                   mvmt_troop_count[1],
                   sp,
                   ts_team_original,
                   _tZ_,
                   _tY_),
                _t0_=st[1],
                f=function(i,e){return i === start?ts:e},
                l=_t0_.length - 1;
               if(0 === l)
                var new_towers=[0];
               else
                {var r=caml_make_vect(l,f(0,_t0_[1])),_tO_=l - 1 | 0,_tN_=1;
                 if(!(_tO_ < 1))
                  {var i=_tN_;
                   for(;;)
                    {r[i + 1] = f(i,_t0_[i + 1]);
                     var _tP_=i + 1 | 0;
                     if(_tO_ !== i){var i=_tP_;continue}
                     break}}
                 var new_towers=r}
               return [0,
                       new_towers,
                       st[2],
                       st[3],
                       st[4],
                       [0,new_mvmt,st[5]],
                       st[6],
                       st[7],
                       st[8],
                       st[9]]}
          return st}
        var skill=c[1];
        switch(skill[1])
         {case 0:var has_enough_mana=skill[2] <= (st[8] | 0)?1:0;break;
          case 1:var has_enough_mana=skill[2] <= (st[9] | 0)?1:0;break;
          default:var has_enough_mana=0}
        if(has_enough_mana)
         {switch(skill[3][0])
           {case 0:var _t1_=0;break;
            case 1:var _t1_=0;break;
            default:
             var
              _t9_=skill[5],
              _t__=caml_check_bound(st[1],_t9_)[_t9_ + 1][9],
              _t1_=skill[1] === _t__?1:0}
          if(_t1_)return st;
          switch(skill[1])
           {case 0:
             var
              _t2_=st[9],
              _t3_=st[8] - skill[2],
              _t4_=st[7],
              _t5_=0 === st[6]?[0,skill]:st[6];
             return [0,st[1],st[2],st[3],st[4],st[5],_t5_,_t4_,_t3_,_t2_];
            case 1:
             var
              _t6_=st[9] - skill[2],
              _t7_=st[8],
              _t8_=0 === st[7]?[0,skill]:st[7];
             return [0,st[1],st[2],st[3],st[4],st[5],st[6],_t8_,_t7_,_t6_];
            default:return st}}
        return st}}
    function new_state_plus_delta(st,c,d)
     {var
       st$0=new_state(st,c),
       _rl_=st$0[5],
       mvmts=
        map
         (function(m)
           {var
             ts_index=m[1],
             te_index=m[2],
             ts=caml_check_bound(st[1],ts_index)[ts_index + 1],
             te=caml_check_bound(st[1],te_index)[te_index + 1],
             start_vector=add_vector2d(ts[2],ts[10]),
             end_vector=add_vector2d(te[2],te[10]),
             distance=
              Math.sqrt
               (Math.pow(start_vector[1] - end_vector[1],2)
                +
                Math.pow(start_vector[2] - end_vector[2],2)),
             _tI_=m[8],
             _tJ_=m[7],
             _tK_=m[6] + m[8] * d / distance,
             _tL_=m[5],
             _tM_=tick(m[4],delta[1]);
            return [0,m[1],m[2],m[3],_tM_,_tL_,_tK_,_tJ_,_tI_]},
          _rl_),
       _rm_=st$0[9],
       _rn_=st$0[8],
       _ro_=st$0[7],
       _rp_=st$0[6],
       _rq_=caml_call1(find_all(function(m){return m[6] < 1?1:0}),mvmts),
       _rr_=st$0[4],
       _rs_=st$0[3],
       _rt_=st$0[2],
       _ru_=copy(st$0[1]),
       st$1=
        [0,
         fold_left
          (function(acc,e)
            {if(e[6] <= 1)return acc;
             var
              _tn_=e[2],
              te=caml_check_bound(acc,_tn_)[_tn_ + 1],
              _to_=e[5],
              _tp_=te[9];
             switch(_to_)
              {case 0:
                if(1 === _tp_)
                 {var
                   new_count=te[6] - e[3] * e[7],
                   new_team=0 === (new_count | 0)?2:new_count < 0?0:1,
                   _tq_=te[12],
                   _tr_=te[11],
                   _ts_=te[10],
                   _tt_=te[8],
                   _tu_=te[7],
                   _tv_=0 === (new_count | 0)?0:Math.abs(new_count),
                   _tx_=e[2],
                   _tw_=
                    [0,
                     te[1],
                     te[2],
                     te[3],
                     te[4],
                     te[5],
                     _tv_,
                     _tu_,
                     _tt_,
                     new_team,
                     _ts_,
                     _tr_,
                     _tq_];
                  caml_check_bound(acc,_tx_)[_tx_ + 1] = _tw_;
                  var switch$0=1}
                else
                 var switch$0=0;
                break;
               case 1:
                if(0 === _tp_)
                 {var
                   new_count$1=te[6] - e[3] * e[7],
                   new_team$0=0 === (new_count$1 | 0)?2:new_count$1 < 0?1:0,
                   _tA_=te[12],
                   _tB_=te[11],
                   _tC_=te[10],
                   _tD_=te[8],
                   _tE_=te[7],
                   _tF_=0 === (new_count$1 | 0)?0:Math.abs(new_count$1),
                   _tH_=e[2],
                   _tG_=
                    [0,
                     te[1],
                     te[2],
                     te[3],
                     te[4],
                     te[5],
                     _tF_,
                     _tE_,
                     _tD_,
                     new_team$0,
                     _tC_,
                     _tB_,
                     _tA_];
                  caml_check_bound(acc,_tH_)[_tH_ + 1] = _tG_;
                  var switch$0=1}
                else
                 var switch$0=0;
                break;
               default:var switch$0=0}
             if(!switch$0)
              {var
                new_count$0=te[6] + e[3],
                _tz_=e[2],
                _ty_=
                 [0,
                  te[1],
                  te[2],
                  te[3],
                  te[4],
                  te[5],
                  new_count$0,
                  te[7],
                  te[8],
                  _to_,
                  te[10],
                  te[11],
                  te[12]];
               caml_check_bound(acc,_tz_)[_tz_ + 1] = _ty_}
             return acc},
           _ru_,
           mvmts),
         _rt_,
         _rs_,
         _rr_,
         _rq_,
         _rp_,
         _ro_,
         _rn_,
         _rm_],
       _rk_=st$1[1],
       match=
        fold_left$0
         (function(param,e)
           {var acc2=param[2],acc1=param[1];
            switch(e[9])
             {case 0:return [0,acc1 + 1 | 0,acc2];
              case 1:return [0,acc1,acc2 + 1 | 0];
              default:return [0,acc1,acc2]}},
          _fo_,
          _rk_),
       en_score=match[2],
       pl_score=match[1];
      function update_skill_helper(st,d,team)
       {if(0 === team)
         {var _rC_=st[6];
          if(_rC_)
           {var sk=_rC_[1],new_towers=copy(st[1]),tower=sk[5],_rD_=sk[3];
            switch(_rD_[0])
             {case 0:
               var secs=_rD_[1];
               if(sk[7][3] <= sk[7][1])
                {if(secs <= 0)
                  {var
                    _rE_=st[9],
                    _rF_=st[8],
                    _rG_=st[7],
                    _rH_=st[5],
                    _rI_=st[4],
                    _rJ_=st[3],
                    _rK_=st[2];
                   caml_check_bound(new_towers,tower)[tower + 1][12] = 0;
                   return [0,new_towers,_rK_,_rJ_,_rI_,_rH_,0,_rG_,_rF_,_rE_]}
                 var
                  _rO_=sk[6],
                  _rL_=st[9],
                  _rM_=st[8],
                  _rN_=st[7],
                  _rP_=
                   [0,
                    [0,
                     sk[1],
                     0,
                     [0,secs - d],
                     sk[4],
                     sk[5],
                     [0,
                      _rO_[1],
                      _rO_[2],
                      sk[6][1].length - 1 - 1 | 0,
                      _rO_[4],
                      _rO_[5]],
                     sk[7]]],
                  _rQ_=st[5],
                  _rR_=st[4],
                  _rS_=st[3],
                  _rT_=st[2];
                 caml_check_bound(new_towers,tower)[tower + 1][12] = 1;
                 return [0,new_towers,_rT_,_rS_,_rR_,_rQ_,_rP_,_rN_,_rM_,_rL_]}
               var
                _rX_=sk[7],
                _rU_=st[9],
                _rV_=st[8],
                _rW_=st[7],
                _rY_=[254,sk[7][1] + sk[7][2] * d,_rX_[2],_rX_[3]],
                _rZ_=tick(sk[6],d);
               return [0,
                       st[1],
                       st[2],
                       st[3],
                       st[4],
                       st[5],
                       [0,[0,sk[1],sk[2],sk[3],sk[4],sk[5],_rZ_,_rY_]],
                       _rW_,
                       _rV_,
                       _rU_];
              case 1:
               var incr_rate=_rD_[1];
               if(sk[7][3] <= sk[7][1])
                {var
                  _r0_=st[9],
                  _r1_=st[8],
                  _r2_=st[7],
                  _r3_=st[5],
                  _r4_=st[4],
                  _r5_=st[3],
                  _r6_=st[2],
                  new_regen=
                   caml_check_bound(new_towers,tower)[tower + 1][8]
                   *
                   incr_rate;
                 new_towers[tower + 1][8] = new_regen;
                 return [0,new_towers,_r6_,_r5_,_r4_,_r3_,0,_r2_,_r1_,_r0_]}
               var
                _r__=sk[7],
                _r7_=st[9],
                _r8_=st[8],
                _r9_=st[7],
                _r$_=[254,sk[7][1] + sk[7][2] * d,_r__[2],_r__[3]],
                _sa_=tick(sk[6],d);
               return [0,
                       st[1],
                       st[2],
                       st[3],
                       st[4],
                       st[5],
                       [0,[0,sk[1],sk[2],sk[3],sk[4],sk[5],_sa_,_r$_]],
                       _r9_,
                       _r8_,
                       _r7_];
              default:
               var n=_rD_[1];
               if(sk[7][3] <= sk[7][1])
                {var
                  _sj_=sk[5],
                  _sb_=st[9],
                  _sc_=st[8],
                  _sd_=st[7],
                  _sf_=st[5],
                  _sg_=st[4],
                  _sh_=st[3],
                  _si_=st[2],
                  _sk_=caml_check_bound(st[1],_sj_)[_sj_ + 1][9],
                  _se_=0,
                  new_troop_count=
                   sk[1] === _sk_
                    ?caml_check_bound(st[1],tower)[tower + 1][6]
                    :max(0,caml_check_bound(st[1],tower)[tower + 1][6] - n),
                  init=caml_check_bound(st[1],tower)[tower + 1],
                  _sl_=init[12],
                  _sm_=init[11],
                  _sn_=init[10],
                  _so_=
                   new_troop_count == 0
                    ?2
                    :caml_check_bound(st[1],tower)[tower + 1][9],
                  _sp_=
                   [0,
                    init[1],
                    init[2],
                    init[3],
                    init[4],
                    init[5],
                    new_troop_count,
                    init[7],
                    init[8],
                    _so_,
                    _sn_,
                    _sm_,
                    _sl_];
                 caml_check_bound(new_towers,tower)[tower + 1] = _sp_;
                 return [0,new_towers,_si_,_sh_,_sg_,_sf_,_se_,_sd_,_sc_,_sb_]}
               var
                _st_=sk[7],
                _sq_=st[9],
                _sr_=st[8],
                _ss_=st[7],
                _su_=[254,sk[7][1] + sk[7][2] * d,_st_[2],_st_[3]],
                _sv_=tick(sk[6],d);
               return [0,
                       st[1],
                       st[2],
                       st[3],
                       st[4],
                       st[5],
                       [0,[0,sk[1],sk[2],sk[3],sk[4],sk[5],_sv_,_su_]],
                       _ss_,
                       _sr_,
                       _sq_]}}
          return st}
        var _sw_=st[7];
        if(_sw_)
         {var
           sk$0=_sw_[1],
           new_towers$0=copy(st[1]),
           tower$0=sk$0[5],
           _sx_=sk$0[3];
          switch(_sx_[0])
           {case 0:
             var secs$0=_sx_[1];
             if(sk$0[7][3] <= sk$0[7][1])
              {if(secs$0 <= 0)
                {var
                  _sy_=st[9],
                  _sz_=st[8],
                  _sA_=st[6],
                  _sB_=st[5],
                  _sC_=st[4],
                  _sD_=st[3],
                  _sE_=st[2];
                 caml_check_bound(new_towers$0,tower$0)[tower$0 + 1][12] = 0;
                 return [0,new_towers$0,_sE_,_sD_,_sC_,_sB_,_sA_,0,_sz_,_sy_]}
               var
                _sH_=sk$0[6],
                _sF_=st[9],
                _sG_=st[8],
                _sI_=
                 [0,
                  [0,
                   sk$0[1],
                   0,
                   [0,secs$0 - d],
                   sk$0[4],
                   sk$0[5],
                   [0,
                    _sH_[1],
                    _sH_[2],
                    sk$0[6][1].length - 1 - 1 | 0,
                    _sH_[4],
                    _sH_[5]],
                   sk$0[7]]],
                _sJ_=st[6],
                _sK_=st[5],
                _sL_=st[4],
                _sM_=st[3],
                _sN_=st[2];
               caml_check_bound(new_towers$0,tower$0)[tower$0 + 1][12] = 1;
               return [0,new_towers$0,_sN_,_sM_,_sL_,_sK_,_sJ_,_sI_,_sG_,_sF_]}
             var
              _sQ_=sk$0[7],
              _sO_=st[9],
              _sP_=st[8],
              _sR_=[254,sk$0[7][1] + sk$0[7][2] * d,_sQ_[2],_sQ_[3]],
              _sS_=tick(sk$0[6],d);
             return [0,
                     st[1],
                     st[2],
                     st[3],
                     st[4],
                     st[5],
                     st[6],
                     [0,[0,sk$0[1],sk$0[2],sk$0[3],sk$0[4],sk$0[5],_sS_,_sR_]],
                     _sP_,
                     _sO_];
            case 1:
             var incr_rate$0=_sx_[1];
             if(sk$0[7][3] <= sk$0[7][1])
              {var
                _sT_=st[9],
                _sU_=st[8],
                _sV_=st[6],
                _sW_=st[5],
                _sX_=st[4],
                _sY_=st[3],
                _sZ_=st[2],
                new_regen$0=
                 caml_check_bound(new_towers$0,tower$0)[tower$0 + 1][8]
                 *
                 incr_rate$0;
               new_towers$0[tower$0 + 1][8] = new_regen$0;
               return [0,new_towers$0,_sZ_,_sY_,_sX_,_sW_,_sV_,0,_sU_,_sT_]}
             var
              _s2_=sk$0[7],
              _s0_=st[9],
              _s1_=st[8],
              _s3_=[254,sk$0[7][1] + sk$0[7][2] * d,_s2_[2],_s2_[3]],
              _s4_=tick(sk$0[6],d);
             return [0,
                     st[1],
                     st[2],
                     st[3],
                     st[4],
                     st[5],
                     st[6],
                     [0,[0,sk$0[1],sk$0[2],sk$0[3],sk$0[4],sk$0[5],_s4_,_s3_]],
                     _s1_,
                     _s0_];
            default:
             var n$0=_sx_[1];
             if(sk$0[7][3] <= sk$0[7][1])
              {var
                _tb_=sk$0[5],
                _s5_=st[9],
                _s6_=st[8],
                _s8_=st[6],
                _s9_=st[5],
                _s__=st[4],
                _s$_=st[3],
                _ta_=st[2],
                _tc_=caml_check_bound(st[1],_tb_)[_tb_ + 1][9],
                _s7_=0,
                new_troop_count$0=
                 sk$0[1] === _tc_
                  ?caml_check_bound(st[1],tower$0)[tower$0 + 1][6]
                  :max
                    (0,caml_check_bound(st[1],tower$0)[tower$0 + 1][6] - n$0),
                init$0=caml_check_bound(st[1],tower$0)[tower$0 + 1],
                _td_=init$0[12],
                _te_=init$0[11],
                _tf_=init$0[10],
                _tg_=
                 new_troop_count$0 == 0
                  ?2
                  :caml_check_bound(st[1],tower$0)[tower$0 + 1][9],
                _th_=
                 [0,
                  init$0[1],
                  init$0[2],
                  init$0[3],
                  init$0[4],
                  init$0[5],
                  new_troop_count$0,
                  init$0[7],
                  init$0[8],
                  _tg_,
                  _tf_,
                  _te_,
                  _td_];
               caml_check_bound(new_towers$0,tower$0)[tower$0 + 1] = _th_;
               return [0,new_towers$0,_ta_,_s$_,_s__,_s9_,_s8_,_s7_,_s6_,_s5_]}
             var
              _tk_=sk$0[7],
              _ti_=st[9],
              _tj_=st[8],
              _tl_=[254,sk$0[7][1] + sk$0[7][2] * d,_tk_[2],_tk_[3]],
              _tm_=tick(sk$0[6],d);
             return [0,
                     st[1],
                     st[2],
                     st[3],
                     st[4],
                     st[5],
                     st[6],
                     [0,[0,sk$0[1],sk$0[2],sk$0[3],sk$0[4],sk$0[5],_tm_,_tl_]],
                     _tj_,
                     _ti_]}}
        return st}
      var
       pl_state=update_skill_helper(st$1,d,0),
       temp_state=update_skill_helper(pl_state,d,1),
       _rv_=temp_state[9],
       _rw_=temp_state[8],
       _rx_=temp_state[7],
       _ry_=temp_state[6],
       _rz_=temp_state[5],
       _rA_=temp_state[2],
       _rB_=temp_state[1];
      return [0,
              map$0
               (function(tower)
                 {if(2 <= tower[9])
                   var new_tcount=0;
                  else
                   if(tower[12])
                    var new_tcount=tower[6];
                   else
                    var
                     dir=(tower[6] | 0) - (tower[7] | 0) | 0,
                     new_tcount=
                      0 === dir
                       ?tower[7]
                       :0 <= dir
                         ?tower[6] - tower[8] * delta[1] * 2
                         :tower[6] + tower[8] * delta[1];
                  return [0,
                          tower[1],
                          tower[2],
                          tower[3],
                          tower[4],
                          tower[5],
                          new_tcount,
                          tower[7],
                          tower[8],
                          tower[9],
                          tower[10],
                          tower[11],
                          tower[12]]},
                _rB_),
              _rA_,
              pl_score,
              en_score,
              _rz_,
              _ry_,
              _rx_,
              _rw_,
              _rv_]}
    function contains_troops_with_team(state,team)
     {var _ri_=state[5],_rj_=0;
      return fold_left
              (function(acc,mvmt){return mvmt[5] === team?1:acc},_rj_,_ri_)}
    function update_mana(state,team)
     {switch(team)
       {case 0:
         var multiplier=state[3] / state[2];
         return state[8] + 6.3 * delta[1] * multiplier;
        case 1:
         var multiplier$0=state[4] / state[2];
         return state[9] + 6.3 * delta[1] * multiplier$0;
        default:return 0}}
    var
     delta$0=2.2,
     easy_iterations=100,
     medium_iterations=150,
     hard_iterations=200;
    function get_random_command(st,allegiance)
     {var commands=possible_commands(st,allegiance),bound=commands.length - 1;
      if(1073741823 < bound)
       var switch$0=0;
      else
       if(0 < bound)
        for(;;)
         {var r=bits(s),v=caml_mod(r,bound);
          if(((1073741823 - bound | 0) + 1 | 0) < (r - v | 0))continue;
          var index=v,switch$0=1;
          break}
       else
        var switch$0=0;
      if(!switch$0)var index=invalid_arg(_bj_);
      return caml_check_bound(commands,index)[index + 1]}
    function get_times_sampled(t){if(0 === t[0])return 1;var n=t[4];return n}
    function get_value(t,is_max)
     {if(0 === t[0])return 1e4;
      var parent=t[6],n=t[4],v=t[3];
      return is_max
              ?v
               +
               1.41421356237309515
               *
               Math.sqrt(Math.log(get_times_sampled(parent[1])))
               /
               n
              :1
               -
               v
               +
               1.41421356237309515
               *
               Math.sqrt(Math.log(get_times_sampled(parent[1])))
               /
               n}
    function create_children(st,allegiance)
     {var moves=possible_commands(st,allegiance);
      return map$0(function(cm){return [0,[0,cm,1e4]]},moves)}
    function create_tree(st$4,iters$2)
     {var
       children$1=create_children(st$4,1),
       root=[0,[1,st$4,0,0,0,children$1,[0,_fA_],1]],
       counter=[0,0];
      a:
      for(;;)
       {if(counter[1] < iters$2)
         {var t$0=root;
          for(;;)
           {var _re_=t$0[1];
            if(0 !== _re_[0])
             {var
               is_max$2=_re_[7],
               func=is_max$2?caml_greaterthan:caml_lessthan,
               _q9_=t$0[1];
              if(0 === _q9_[0])
               var match=[0,[0],1];
              else
               var
                is_max_bool=_q9_[7],
                chldrn=_q9_[5],
                match=[0,chldrn,is_max_bool];
              var
               is_max=match[2],
               children=match[1],
               _q__=caml_check_bound(children,0)[1],
               t=
                fold_left$0
                 (function(func,is_max)
                    {return function(acc,child)
                      {var _rh_=get_value(acc[1],is_max);
                       return func(get_value(child[1],is_max),_rh_)?child:acc}}
                   (func,is_max),
                  _q__,
                  children),
               _rf_=t[1];
              if(0 !== _rf_[0]){var t$0=t;continue}
              var cm$2=_rf_[1],_rb_=t$0[1];
              if(0 === _rb_[0])
               var _rg_=t$0;
              else
               {var
                 is_max$1=_rb_[7],
                 old_st=_rb_[1],
                 st$3=new_state_plus_delta(old_st,cm$2,delta$0),
                 st=st$3,
                 max_bool=is_max$1,
                 iters=0;
                for(;;)
                 {if(100 < iters)
                   var rand_play=0.4 + float$0(0.2);
                  else
                   {var _q7_=0 === st[3]?1:0,_q8_=_q7_ || (0 === st[4]?1:0);
                    if(!_q8_)
                     {if(max_bool)
                       {var
                         cm=get_random_command(st,1),
                         st$0=new_state_plus_delta(st,cm,delta$0),
                         iters$0=iters + 1 | 0,
                         st=st$0,
                         max_bool=0,
                         iters=iters$0;
                        continue}
                      var
                       cm$0=get_random_command(st,0),
                       st$1=new_state_plus_delta(st,cm$0,delta$0),
                       iters$1=iters + 1 | 0,
                       st=st$1,
                       max_bool=1,
                       iters=iters$1;
                      continue}
                    var
                     rand_play=
                      st[4] < st[3]?0 + 0.3 * iters / 100:1 - 0.3 * iters / 100}
                  var node=t$0;
                  for(;;)
                   {var _ra_=node[1];
                    if(0 !== _ra_[0])
                     {var node$0=_ra_[6],_q$_=node[1];
                      if(0 !== _q$_[0])
                       {var
                         is_max$0=_q$_[7],
                         parent=_q$_[6],
                         children$0=_q$_[5],
                         n=_q$_[4],
                         v=_q$_[3],
                         cm$1=_q$_[2],
                         st$2=_q$_[1];
                        node[1]
                        =
                        [1,
                         st$2,
                         cm$1,
                         v + (rand_play - v) / (n + 1),
                         n + 1,
                         children$0,
                         parent,
                         is_max$0]}
                      var node=node$0;
                      continue}
                    var
                     max_bool$0=1 - is_max$1,
                     _rc_=1 - is_max$1,
                     _rd_=max_bool$0?1:0,
                     _rg_=
                      [0,
                       [1,
                        st$3,
                        cm$2,
                        rand_play,
                        0,
                        create_children(old_st,_rd_),
                        t$0,
                        _rc_]];
                    break}
                  break}}
              t[1] = _rg_[1]}
            counter[1] = counter[1] + 1 | 0;
            continue a}}
        return root}}
    function win_pctg(node)
     {var _q6_=node[1];if(0 === _q6_[0])return 0;var v=_q6_[3];return v}
    function run_tests(tests)
     {var test_fail=[0,0],_q4_=1;
      fold_left
       (function(acc,param)
         {var testthunk=param[2],name=param[1];
          return 0 === acc
                  ?0
                  :caml_call1(testthunk,0)?1:(test_fail[1] = [0,name],0)},
        _q4_,
        tests);
      var _q5_=test_fail[1];
      if(_q5_){var name=_q5_[1];return _a_(_fB_,name)}
      return _fC_}
    var
     _fD_=0,
     tests=[0,[0,_fE_,function(param){return 1}],_fD_],
     map_index=[0,-1],
     troop_regen_speed=1;
    function base_tower(id,team,pos)
     {switch(team)
       {case 0:var troop_count=1;break;
        case 1:var troop_count=10;break;
        default:var troop_count=0}
      var _q2_=0;
      switch(team)
       {case 0:var _q3_=_fF_;break;
        case 1:var _q3_=[254,0,-10];break;
        default:var _q3_=_fI_}
      return [0,
              id,
              pos,
              _fH_,
              tower_base,
              troop_foot_soldier,
              troop_count,
              50,
              1,
              team,
              _fG_,
              _q3_,
              _q2_]}
    function tower_mini(id,team,pos)
     {return [0,
              id,
              pos,
              _fK_,
              tower_type1,
              troop_foot_soldier,
              0,
              20,
              troop_regen_speed,
              team,
              _fJ_,
              [254,0,-10],
              0]}
    function tower_medium(id,team,pos)
     {return [0,
              id,
              pos,
              _fM_,
              tower_type1,
              troop_foot_soldier,
              0,
              30,
              troop_regen_speed,
              team,
              _fL_,
              [254,0,-10],
              0]}
    function tower_cavalry(id,team,pos)
     {return [0,
              id,
              pos,
              _fO_,
              tower_type2,
              troop_cavalry,
              0,
              15,
              troop_regen_speed,
              team,
              _fN_,
              [254,0,-10],
              0]}
    var
     _fV_=tower_mini(5,2,_fU_),
     _fX_=tower_mini(4,2,_fW_),
     _fZ_=tower_mini(3,2,_fY_),
     _f1_=tower_mini(2,2,_f0_),
     _f3_=base_tower(1,1,_f2_),
     map1=
      [0,
       [0,[0,base_tower(0,0,_f4_),_f3_,_f1_,_fZ_,_fX_,_fV_],6,0,0,0,0,0,0,0],
       [0,[0,_fT_,[0,[1,[0,_fS_,_fR_,25],_fQ_,_fP_]]],0]],
     _f$_=tower_mini(5,2,_f__),
     _gb_=tower_mini(4,2,_ga_),
     _gd_=tower_mini(3,2,_gc_),
     _gf_=tower_mini(2,2,_ge_),
     _gh_=tower_mini(5,2,_gg_),
     _gj_=tower_mini(4,2,_gi_),
     _gl_=tower_mini(3,2,_gk_),
     _gn_=tower_mini(2,2,_gm_),
     _gp_=base_tower(1,1,_go_),
     map2=
      [0,
       [0,
        [0,base_tower(0,0,_gq_),_gp_,_gn_,_gl_,_gj_,_gh_,_gf_,_gd_,_gb_,_f$_],
        6,
        6,
        0,
        0,
        0,
        0,
        0,
        0],
       [0,[0,_f9_,[0,[1,[0,_f8_,_f7_,25],_f6_,_f5_]]],0]],
     _gx_=tower_medium(4,2,_gw_),
     _gz_=tower_mini(3,2,_gy_),
     _gB_=tower_mini(2,2,_gA_),
     _gD_=tower_mini(5,2,_gC_),
     _gF_=tower_mini(4,2,_gE_),
     _gH_=tower_mini(3,2,_gG_),
     _gJ_=tower_mini(2,2,_gI_),
     _gL_=base_tower(1,1,_gK_),
     map3=
      [0,
       [0,
        [0,base_tower(0,0,_gM_),_gL_,_gJ_,_gH_,_gF_,_gD_,_gB_,_gz_,_gx_],
        6,
        6,
        0,
        0,
        0,
        0,
        0,
        0],
       [0,[0,_gv_,[0,[1,[0,_gu_,_gt_,25],_gs_,_gr_]]],0]],
     _gT_=tower_medium(4,2,_gS_),
     _gV_=tower_medium(4,2,_gU_),
     _gX_=tower_medium(4,2,_gW_),
     _gZ_=tower_medium(4,2,_gY_),
     _g1_=tower_medium(3,2,_g0_),
     _g3_=tower_medium(2,2,_g2_),
     _g5_=tower_medium(5,2,_g4_),
     _g7_=tower_medium(4,2,_g6_),
     _g9_=tower_medium(3,2,_g8_),
     _g$_=tower_medium(2,2,_g__),
     _hb_=base_tower(1,1,_ha_),
     map4=
      [0,
       [0,
        [0,
         base_tower(0,0,_hc_),
         _hb_,
         _g$_,
         _g9_,
         _g7_,
         _g5_,
         _g3_,
         _g1_,
         _gZ_,
         _gX_,
         _gV_,
         _gT_],
        6,
        6,
        0,
        0,
        0,
        0,
        0,
        0],
       [0,[0,_gR_,[0,[1,[0,_gQ_,_gP_,25],_gO_,_gN_]]],0]],
     _hj_=tower_cavalry(6,2,_hi_),
     _hk_=tower_medium(5,2,[254,480,480]),
     _hm_=tower_medium(4,2,_hl_),
     _hn_=tower_mini(3,2,[254,780,480]),
     _hp_=tower_mini(2,2,_ho_),
     _hq_=base_tower(1,1,[254,1008,544]),
     map5=
      [0,
       [0,
        [0,base_tower(0,0,_hr_),_hq_,_hp_,_hn_,_hm_,_hk_,_hj_],
        8,
        8,
        0,
        0,
        0,
        0,
        0,
        0],
       [0,[0,_hh_,[0,[1,[0,_hg_,_hf_,25],_he_,_hd_]]],0]],
     _hy_=tower_cavalry(0,2,_hx_),
     _hA_=tower_cavalry(0,2,_hz_),
     _hC_=tower_cavalry(0,2,_hB_),
     _hE_=tower_cavalry(0,2,_hD_),
     _hG_=tower_medium(6,1,_hF_),
     _hI_=tower_medium(6,1,_hH_),
     _hK_=tower_medium(6,1,_hJ_),
     _hM_=tower_medium(6,1,_hL_),
     _hO_=tower_medium(5,0,_hN_),
     _hQ_=tower_medium(4,0,_hP_),
     _hS_=tower_medium(3,0,_hR_),
     _hU_=tower_medium(2,0,_hT_),
     _hW_=base_tower(1,1,_hV_),
     map6=
      [0,
       [0,
        [0,
         base_tower(0,0,_hX_),
         _hW_,
         _hU_,
         _hS_,
         _hQ_,
         _hO_,
         _hM_,
         _hK_,
         _hI_,
         _hG_,
         _hE_,
         _hC_,
         _hA_,
         _hy_],
        8,
        8,
        0,
        0,
        0,
        0,
        0,
        0],
       [0,[0,_hw_,[0,[1,[0,_hv_,_hu_,25],_ht_,_hs_]]],0]],
     _h9_=tower_cavalry(0,2,_h8_),
     _h$_=tower_cavalry(0,2,_h__),
     _ib_=tower_cavalry(0,2,_ia_),
     _id_=tower_cavalry(0,2,_ic_),
     _if_=tower_cavalry(0,2,_ie_),
     _ih_=tower_cavalry(0,2,_ig_),
     _ij_=tower_cavalry(0,2,_ii_),
     _il_=tower_cavalry(0,2,_ik_),
     _in_=tower_cavalry(0,2,_im_),
     _ip_=tower_cavalry(0,2,_io_),
     _ir_=tower_medium(0,1,_iq_),
     _it_=tower_medium(0,1,_is_),
     _iv_=tower_medium(0,1,_iu_),
     _ix_=tower_medium(0,0,_iw_),
     _iz_=tower_medium(0,0,_iy_),
     _iB_=tower_medium(0,0,_iA_),
     _iD_=tower_mini(0,2,_iC_),
     _iF_=tower_mini(0,2,_iE_),
     _iH_=tower_mini(6,2,_iG_),
     _iJ_=tower_mini(6,2,_iI_),
     _iL_=tower_mini(6,2,_iK_),
     _iN_=tower_mini(6,2,_iM_),
     _iP_=tower_mini(5,2,_iO_),
     _iR_=tower_mini(4,2,_iQ_),
     _iT_=tower_mini(3,2,_iS_),
     _iV_=tower_mini(2,2,_iU_),
     _iX_=base_tower(1,1,_iW_),
     map7=
      [0,
       [0,
        [0,
         base_tower(0,0,_iY_),
         _iX_,
         _iV_,
         _iT_,
         _iR_,
         _iP_,
         _iN_,
         _iL_,
         _iJ_,
         _iH_,
         _iF_,
         _iD_,
         _iB_,
         _iz_,
         _ix_,
         _iv_,
         _it_,
         _ir_,
         _ip_,
         _in_,
         _il_,
         _ij_,
         _ih_,
         _if_,
         _id_,
         _ib_,
         _h$_,
         _h9_],
        8,
        8,
        0,
        0,
        0,
        0,
        0,
        0],
       [0,
        [0,_h7_,[0,[1,[0,_h6_,_h5_,25],_h4_,_h3_]]],
        [0,[0,_h2_,[0,[1,[0,_h1_,_h0_,25],_hZ_,_hY_]]],0]]],
     _i5_=tower_medium(0,2,_i4_),
     _i7_=tower_medium(0,2,_i6_),
     _i9_=tower_cavalry(0,2,_i8_),
     _i$_=tower_medium(0,2,_i__),
     _jb_=tower_medium(0,2,_ja_),
     _jd_=tower_cavalry(0,2,_jc_),
     _jf_=tower_medium(0,2,_je_),
     _jh_=tower_medium(0,2,_jg_),
     _jj_=tower_cavalry(0,2,_ji_),
     _jl_=tower_medium(0,2,_jk_),
     _jn_=tower_mini(0,2,_jm_),
     _jp_=tower_cavalry(0,2,_jo_),
     _jr_=tower_mini(6,2,_jq_),
     _jt_=tower_mini(6,2,_js_),
     _jv_=tower_mini(6,2,_ju_),
     _jx_=tower_cavalry(6,2,_jw_),
     _jz_=tower_mini(5,2,_jy_),
     _jB_=tower_mini(4,2,_jA_),
     _jD_=tower_mini(3,2,_jC_),
     _jF_=tower_cavalry(2,2,_jE_),
     _jH_=tower_mini(0,2,_jG_),
     _jJ_=tower_mini(0,2,_jI_),
     _jL_=tower_mini(6,2,_jK_),
     _jN_=tower_mini(6,2,_jM_),
     _jP_=tower_cavalry(6,2,_jO_),
     _jR_=tower_mini(6,2,_jQ_),
     _jT_=tower_mini(5,2,_jS_),
     _jV_=tower_mini(4,2,_jU_),
     _jX_=tower_cavalry(3,2,_jW_),
     _jZ_=tower_mini(2,2,_jY_),
     _j1_=base_tower(1,0,_j0_),
     _j3_=base_tower(0,1,_j2_),
     _j5_=base_tower(1,0,_j4_),
     map8=
      [0,
       [0,
        [0,
         base_tower(0,1,_j6_),
         _j5_,
         _j3_,
         _j1_,
         _jZ_,
         _jX_,
         _jV_,
         _jT_,
         _jR_,
         _jP_,
         _jN_,
         _jL_,
         _jJ_,
         _jH_,
         _jF_,
         _jD_,
         _jB_,
         _jz_,
         _jx_,
         _jv_,
         _jt_,
         _jr_,
         _jp_,
         _jn_,
         _jl_,
         _jj_,
         _jh_,
         _jf_,
         _jd_,
         _jb_,
         _i$_,
         _i9_,
         _i7_,
         _i5_],
        8,
        8,
        0,
        0,
        0,
        0,
        0,
        0],
       [0,[0,_i3_,[0,[1,[0,_i2_,_i1_,25],_i0_,_iZ_]]],0]],
     _kb_=tower_medium(0,2,_ka_),
     _kd_=tower_cavalry(0,2,_kc_),
     _kf_=tower_cavalry(0,2,_ke_),
     _kh_=tower_cavalry(0,2,_kg_),
     _kj_=tower_cavalry(0,2,_ki_),
     _kl_=tower_mini(4,2,_kk_),
     _kn_=tower_mini(3,2,_km_),
     _kp_=tower_mini(0,2,_ko_),
     _kr_=tower_mini(0,2,_kq_),
     _kt_=tower_mini(6,2,_ks_),
     _kv_=tower_mini(6,2,_ku_),
     _kx_=tower_mini(6,2,_kw_),
     _kz_=tower_mini(5,2,_ky_),
     _kB_=tower_mini(4,2,_kA_),
     _kD_=tower_mini(2,2,_kC_),
     _kF_=base_tower(1,1,_kE_),
     _kH_=base_tower(1,1,_kG_),
     _kJ_=base_tower(0,1,_kI_),
     _kL_=base_tower(1,1,_kK_),
     _kN_=base_tower(0,1,_kM_),
     _kP_=base_tower(1,0,_kO_),
     _kR_=base_tower(1,0,_kQ_),
     _kT_=base_tower(0,0,_kS_),
     _kV_=base_tower(1,0,_kU_),
     map9=
      [0,
       [0,
        [0,
         base_tower(0,0,_kW_),
         _kV_,
         _kT_,
         _kR_,
         _kP_,
         _kN_,
         _kL_,
         _kJ_,
         _kH_,
         _kF_,
         _kD_,
         _kB_,
         _kz_,
         _kx_,
         _kv_,
         _kt_,
         _kr_,
         _kp_,
         _kn_,
         _kl_,
         _kj_,
         _kh_,
         _kf_,
         _kd_,
         _kb_],
        8,
        8,
        0,
        0,
        0,
        0,
        0,
        0],
       [0,[0,_j$_,[0,[1,[0,_j__,_j9_,25],_j8_,_j7_]]],0]],
     _k3_=tower_mini(3,2,_k2_),
     _k5_=tower_mini(0,2,_k4_),
     _k7_=tower_mini(0,2,_k6_),
     _k9_=tower_mini(6,2,_k8_),
     _k$_=tower_mini(6,2,_k__),
     _lb_=tower_mini(5,2,_la_),
     _ld_=tower_mini(4,2,_lc_),
     _lf_=tower_mini(2,2,_le_),
     _lh_=tower_mini(0,2,_lg_),
     _lj_=tower_mini(6,2,_li_),
     _ll_=tower_mini(6,2,_lk_),
     _ln_=tower_mini(5,2,_lm_),
     _lp_=tower_mini(0,2,_lo_),
     _lr_=tower_mini(6,2,_lq_),
     _lt_=tower_mini(6,2,_ls_),
     _lv_=tower_mini(5,2,_lu_),
     _lx_=tower_mini(3,2,_lw_),
     _lz_=tower_mini(0,2,_ly_),
     _lB_=tower_mini(0,2,_lA_),
     _lD_=tower_mini(6,2,_lC_),
     _lF_=tower_mini(6,2,_lE_),
     _lH_=tower_mini(6,2,_lG_),
     _lJ_=tower_mini(5,2,_lI_),
     _lL_=tower_mini(4,2,_lK_),
     _lN_=tower_mini(2,2,_lM_),
     _lP_=base_tower(1,1,_lO_),
     _lR_=base_tower(1,1,_lQ_),
     _lT_=base_tower(1,1,_lS_),
     _lV_=base_tower(0,1,_lU_),
     _lX_=base_tower(1,1,_lW_),
     _lZ_=base_tower(0,1,_lY_),
     _l1_=base_tower(1,0,_l0_),
     _l3_=base_tower(1,0,_l2_),
     _l5_=base_tower(1,0,_l4_),
     _l7_=base_tower(0,0,_l6_),
     _l9_=base_tower(1,0,_l8_),
     map10=
      [0,
       [0,
        [0,
         base_tower(0,0,_l__),
         _l9_,
         _l7_,
         _l5_,
         _l3_,
         _l1_,
         _lZ_,
         _lX_,
         _lV_,
         _lT_,
         _lR_,
         _lP_,
         _lN_,
         _lL_,
         _lJ_,
         _lH_,
         _lF_,
         _lD_,
         _lB_,
         _lz_,
         _lx_,
         _lv_,
         _lt_,
         _lr_,
         _lp_,
         _ln_,
         _ll_,
         _lj_,
         _lh_,
         _lf_,
         _ld_,
         _lb_,
         _k$_,
         _k9_,
         _k7_,
         _k5_,
         _k3_],
        8,
        8,
        0,
        0,
        0,
        0,
        0,
        0],
       [0,[0,_k1_,[0,[1,[0,_k0_,_kZ_,25],_kY_,_kX_]]],0]];
    function fix_map(param)
     {var
       int$0=param[2],
       st=param[1],
       total_towers=st[1].length - 1,
       player_towers=[0,0],
       enemy_towers=[0,0],
       id=[0,-1],
       _q0_=st[1],
       _q1_=[0],
       new_towers=
        fold_left$0
         (function(acc,t)
           {switch(t[9])
             {case 0:player_towers[1] = player_towers[1] + 1 | 0;break;
              case 1:enemy_towers[1] = enemy_towers[1] + 1 | 0;break
              }
            id[1] = id[1] + 1 | 0;
            return append$0
                    (acc,
                     [0,
                      [0,
                       id[1],
                       t[2],
                       t[3],
                       t[4],
                       t[5],
                       t[6],
                       t[7],
                       t[8],
                       t[9],
                       t[10],
                       t[11],
                       t[12]]])},
          _q1_,
          _q0_);
      return [0,
              [0,
               new_towers,
               total_towers,
               player_towers[1],
               enemy_towers[1],
               0,
               0,
               0,
               100,
               100],
              int$0]}
    var
     _l$_=fix_map(map10),
     _ma_=fix_map(map9),
     _mb_=fix_map(map8),
     _mc_=fix_map(map7),
     _md_=fix_map(map6),
     _me_=fix_map(map5),
     _mf_=fix_map(map4),
     _mg_=fix_map(map3),
     _mh_=fix_map(map2),
     maps=[0,fix_map(map1),_mh_,_mg_,_mf_,_me_,_md_,_mc_,_mb_,_ma_,_l$_],
     init_movement02=[0,0,2,5,blue_troop1_right,0,0,1,100],
     base_player_tower=
      [0,0,_ml_,_mk_,tower_base,troop_foot_soldier$0,10,100,1,0,_mj_,_mi_,0],
     base_player_tower_copy=
      [0,0,_mp_,_mo_,tower_base,troop_foot_soldier$0,10,100,1,0,_mn_,_mm_,0],
     neutral_mini_cavalry=
      [0,1,_ms_,_mr_,tower_type1,troop_cavalry$0,0,30,1,2,_mq_,[254,0,-10],0],
     neutral_mini_cavalry_copy=
      [0,1,_mv_,_mu_,tower_type1,troop_cavalry$0,0,30,1,2,_mt_,[254,0,-10],0],
     base_enemy_tower=
      [0,
       2,
       [254,1008,544],
       _mx_,
       tower_base,
       troop_foot_soldier$0,
       10,
       100,
       1,
       1,
       _mw_,
       [254,0,-10],
       0],
     base_enemy_tower_copy=
      [0,
       2,
       [254,1008,544],
       _mz_,
       tower_base,
       troop_foot_soldier$0,
       10,
       100,
       1,
       1,
       _my_,
       [254,0,-10],
       0],
     init_state=
      [0,
       [0,base_player_tower,neutral_mini_cavalry,base_enemy_tower],
       3,
       1,
       1,
       0,
       0,
       0,
       250,
       250],
     init_state_copy=
      [0,
       [0,
        base_player_tower_copy,
        neutral_mini_cavalry_copy,
        base_enemy_tower_copy],
       3,
       1,
       1,
       0,
       0,
       0,
       250,
       250],
     init_stun_from_player_valid=[0,0,100,_mC_,_mB_,2,sprite_freeze,_mA_],
     init_stun_from_enemy_valid=[0,1,100,_mF_,_mE_,0,sprite_freeze,_mD_],
     init_kill_from_player_valid=[0,0,70,_mI_,_mH_,2,sprite_freeze,_mG_],
     init_kill_from_enemy_valid=[0,1,70,_mL_,_mK_,0,sprite_freeze,_mJ_],
     init_reg_from_player_valid1=[0,0,0,_mO_,_mN_,0,sprite_freeze,_mM_],
     init_reg_from_enemy_valid1=[0,1,0,_mR_,_mQ_,2,sprite_freeze,_mP_],
     init_reg_from_player_valid2=[0,0,0,_mU_,_mT_,2,sprite_freeze,_mS_],
     init_reg_from_enemy_valid2=[0,1,0,_mX_,_mW_,0,sprite_freeze,_mV_],
     delta$1=0.1,
     _mY_=0,
     helper_tests=
      [0,
       [0,
        _mZ_,
        function(param)
         {return caml_equal
                  (init_movement02,
                   new_movement(1,2,5,blue_troop1_right,0,1,50))}],
       _mY_],
     _m0_=0,
     _m2_=
      [0,
       [0,
        _m1_,
        function(param)
         {new_state_plus_delta
           (init_state_copy,[1,init_reg_from_enemy_valid2],delta$1);
          return caml_equal(init_state,init_state_copy)}],
       _m0_],
     _m4_=
      [0,
       [0,
        _m3_,
        function(param)
         {new_state_plus_delta
           (init_state_copy,[1,init_reg_from_enemy_valid1],delta$1);
          return caml_equal(init_state,init_state_copy)}],
       _m2_],
     _m6_=
      [0,
       [0,
        _m5_,
        function(param)
         {new_state_plus_delta
           (init_state_copy,[1,init_kill_from_enemy_valid],delta$1);
          return caml_equal(init_state,init_state_copy)}],
       _m4_],
     _m8_=
      [0,
       [0,
        _m7_,
        function(param)
         {new_state_plus_delta
           (init_state_copy,[1,init_stun_from_enemy_valid],delta$1);
          return caml_equal(init_state,init_state_copy)}],
       _m6_],
     _m__=
      [0,
       [0,
        _m9_,
        function(param)
         {new_state_plus_delta
           (init_state_copy,[1,init_reg_from_player_valid2],delta$1);
          return caml_equal(init_state,init_state_copy)}],
       _m8_],
     _na_=
      [0,
       [0,
        _m$_,
        function(param)
         {new_state_plus_delta
           (init_state_copy,[1,init_reg_from_player_valid1],delta$1);
          return caml_equal(init_state,init_state_copy)}],
       _m__],
     _nc_=
      [0,
       [0,
        _nb_,
        function(param)
         {new_state_plus_delta
           (init_state_copy,[1,init_kill_from_player_valid],delta$1);
          return caml_equal(init_state,init_state_copy)}],
       _na_],
     _ne_=
      [0,
       [0,
        _nd_,
        function(param)
         {new_state_plus_delta
           (init_state_copy,[1,init_stun_from_player_valid],delta$1);
          return caml_equal(init_state,init_state_copy)}],
       _nc_],
     _nh_=
      [0,
       [0,
        _ng_,
        function(param)
         {new_state_plus_delta(init_state_copy,_nf_,delta$1);
          return caml_equal(init_state,init_state_copy)}],
       _ne_],
     _nk_=
      [0,
       [0,
        _nj_,
        function(param)
         {new_state_plus_delta(init_state_copy,_ni_,delta$1);
          return caml_equal(init_state,init_state_copy)}],
       _nh_],
     _nn_=
      [0,
       [0,
        _nm_,
        function(param)
         {new_state_plus_delta(init_state_copy,_nl_,delta$1);
          return caml_equal(init_state,init_state_copy)}],
       _nk_],
     _nq_=
      [0,
       [0,
        _np_,
        function(param)
         {new_state_plus_delta(init_state_copy,_no_,delta$1);
          return caml_equal(init_state,init_state_copy)}],
       _nn_],
     _ns_=
      [0,
       [0,
        _nr_,
        function(param)
         {new_state(init_state_copy,[1,init_reg_from_enemy_valid2]);
          return caml_equal(init_state,init_state_copy)}],
       _nq_],
     _nu_=
      [0,
       [0,
        _nt_,
        function(param)
         {new_state(init_state_copy,[1,init_reg_from_player_valid2]);
          return caml_equal(init_state,init_state_copy)}],
       _ns_],
     _nw_=
      [0,
       [0,
        _nv_,
        function(param)
         {new_state(init_state_copy,[1,init_reg_from_enemy_valid1]);
          return caml_equal(init_state,init_state_copy)}],
       _nu_],
     _ny_=
      [0,
       [0,
        _nx_,
        function(param)
         {new_state(init_state_copy,[1,init_reg_from_player_valid1]);
          return caml_equal(init_state,init_state_copy)}],
       _nw_],
     _nA_=
      [0,
       [0,
        _nz_,
        function(param)
         {new_state(init_state_copy,[1,init_kill_from_enemy_valid]);
          return caml_equal(init_state,init_state_copy)}],
       _ny_],
     _nC_=
      [0,
       [0,
        _nB_,
        function(param)
         {new_state(init_state_copy,[1,init_kill_from_player_valid]);
          return caml_equal(init_state,init_state_copy)}],
       _nA_],
     _nE_=
      [0,
       [0,
        _nD_,
        function(param)
         {new_state(init_state_copy,[1,init_stun_from_enemy_valid]);
          return caml_equal(init_state,init_state_copy)}],
       _nC_],
     _nG_=
      [0,
       [0,
        _nF_,
        function(param)
         {new_state(init_state_copy,[1,init_stun_from_player_valid]);
          return caml_equal(init_state,init_state_copy)}],
       _nE_],
     _nJ_=
      [0,
       [0,
        _nI_,
        function(param)
         {new_state(init_state_copy,_nH_);
          return caml_equal(init_state,init_state_copy)}],
       _nG_],
     _nM_=
      [0,
       [0,
        _nL_,
        function(param)
         {new_state(init_state_copy,_nK_);
          return caml_equal(init_state,init_state_copy)}],
       _nJ_],
     _nP_=
      [0,
       [0,
        _nO_,
        function(param)
         {new_state(init_state_copy,_nN_);
          return caml_equal(init_state,init_state_copy)}],
       _nM_],
     _nS_=
      [0,
       [0,
        _nR_,
        function(param)
         {new_state(init_state_copy,_nQ_);
          return caml_equal(init_state,init_state_copy)}],
       _nP_],
     _nU_=
      [0,
       [0,
        _nT_,
        function(param)
         {possible_commands(init_state_copy,1);
          return caml_equal(init_state,init_state_copy)}],
       _nS_],
     _nW_=
      [0,
       [0,
        _nV_,
        function(param)
         {possible_commands(init_state_copy,0);
          return caml_equal(init_state,init_state_copy)}],
       _nU_],
     state_immutability_tests=
      [0,
       [0,_nX_,function(param){return caml_equal(init_state,init_state_copy)}],
       _nW_],
     tests$0=flatten([0,helper_tests,[0,state_immutability_tests,[0,0,0]]]),
     empty_state=[0,[0],0,0,0,0,0,0,0,0],
     lightning_skill=[0,2,70,_n0_,_nZ_,-1,sprite_lightning,_nY_],
     freeze_skill=[0,2,100,_n3_,_n2_,-1,sprite_freeze,_n1_],
     health_skill=[0,2,200,_n6_,_n5_,-1,sprite_freeze,_n4_],
     spell_bar=
      [0,
       [0,
        _oh_,
        [0,
         [3,
          [0,2,spell_btn_sprite,[0,sprite_lightning_icon],_og_],
          [254,0,630],
          _of_,
          lightning_skill]]],
       [0,
        [0,
         _oe_,
         [0,
          [3,
           [0,2,spell_btn_sprite,[0,sprite_freeze_icon],_od_],
           [254,50,630],
           _oc_,
           freeze_skill]]],
        [0,
         [0,
          _ob_,
          [0,
           [3,
            [0,2,spell_btn_sprite,[0,sprite_heart_icon],_oa_],
            [254,100,630],
            _n$_,
            health_skill]]],
         [0,[0,_n__,[0,[1,[0,_n9_,_n8_,20],[254,170,670],_n7_]]],0]]]],
     difficulty_selection_scene=
      [0,
       _oC_,
       0,
       empty_state,
       [0,
        [0,_oB_,[0,fps_label]],
        [0,
         [0,_oA_,[0,[1,[0,_oz_,_oy_,40],[254,280,200],_ox_]]],
         [0,
          [0,
           _ow_,
           [0,
            [0,
             [0,1,menu_btn_sprite1,[0,_ov_,_ou_,30],[254,50,50]],
             [254,440,300],
             _ot_,
             _os_]]],
          [0,
           [0,
            _or_,
            [0,
             [0,
              [0,1,menu_btn_sprite1,[0,_oq_,_op_,30],[254,10,50]],
              [254,440,400],
              _oo_,
              _on_]]],
           [0,
            [0,
             _om_,
             [0,
              [0,
               [0,1,menu_btn_sprite1,[0,_ol_,_ok_,30],[254,50,50]],
               [254,440,500],
               _oj_,
               _oi_]]],
            0]]]]],
       init_input,
       0,
       0,
       cracked_background],
     game_scene=
      [0,
       _oE_,
       0,
       empty_state,
       append([0,[0,_oD_,[0,fps_label]],0],spell_bar),
       init_input,
       0,
       0,
       grass_background],
     game_over_scene=
      [0,
       _oP_,
       [0,fade_in,0],
       empty_state,
       [0,
        [0,_oO_,[0,fps_label]],
        [0,
         [0,_oN_,[0,[1,[0,_oM_,_oL_,40],[254,370,200],_oK_]]],
         [0,
          [0,
           _oJ_,
           [0,
            [0,
             [0,1,menu_btn_sprite1,[0,_oI_,_oH_,30],[254,40,50]],
             [254,440,300],
             _oG_,
             _oF_]]],
          0]]],
       init_input,
       0,
       0,
       cracked_background],
     intro_scene=
      [0,
       _o4_,
       [0,fade_in,0],
       empty_state,
       [0,
        [0,_o3_,[0,fps_label]],
        [0,
         [0,
          _o2_,
          [0,
           [0,
            [0,1,menu_btn_sprite1,[0,_o1_,_o0_,30],[254,50,50]],
            [254,440,400],
            _oZ_,
            _oY_]]],
         [0,
          [0,_oX_,[0,[1,[0,_oW_,_oV_,75],[254,242.5,200],_oU_]]],
          [0,[0,_oT_,[0,[1,[0,_oS_,_oR_,20],[254,365,600],_oQ_]]],0]]]],
       init_input,
       0,
       0,
       cracked_background],
     current_scene=[0,intro_scene],
     prev_mouse_state=[0,2],
     n=createCanvas(doc);
    function calculate_mouse_pos(event)
     {var
       rect=n.getBoundingClientRect(),
       x=event.clientX - (rect.left | 0) | 0,
       y=event.clientY - (rect.top | 0) | 0;
      return [254,x,y]}
    function mouse_pressed(event)
     {var pos=calculate_mouse_pos(event),scene=current_scene[1];
      scene[5] = [0,pos,0];
      current_scene[1] = scene;
      return true$0}
    function mouse_released(event)
     {var pos=calculate_mouse_pos(event),scene=current_scene[1];
      scene[5] = [0,pos,1];
      current_scene[1] = scene;
      return true$0}
    function mouse_move(event)
     {var pos=calculate_mouse_pos(event),scene=current_scene[1];
      scene[5] = [0,pos,2];
      current_scene[1] = scene;
      return true$0}
    function get_scene_from_name(name)
     {return caml_string_notequal(name,_o9_)
              ?caml_string_notequal(name,_o__)
                ?caml_string_notequal(name,_o$_)
                  ?caml_string_notequal(name,_pa_)
                    ?intro_scene
                    :difficulty_selection_scene
                  :intro_scene
                :game_over_scene
              :game_scene}
    function main(param)
     {print_endline(_pi_);
      var main_gui=doc.getElementById("main");
      if(main_gui == no_handler)throw [0,Assert_failure,_o8_];
      n.width = 1080;
      n.height = 680;
      n.id = "canvas";
      main_gui.appendChild(n);
      var context=n.getContext(jsoo_6d9ac43e);
      addEventListener(doc,mousedown,handler(mouse_pressed),true$0);
      addEventListener(doc,mouseup,handler(mouse_released),true$0);
      addEventListener(doc,mousemove,handler(mouse_move),true$0);
      print_endline(_a_(_pg_,run_tests(tests$0)));
      print_endline(_a_(_ph_,run_tests(tests)));
      var last_move_time=[0,caml_sys_time(0)];
      switch(difficulty_level[1])
       {case 0:var base_step_length=3.6;break;
        case 1:var base_step_length=1.9;break;
        default:var base_step_length=0.7}
      var next_move_step=[0,base_step_length + float$0(0.4)];
      function helper(param)
       {var new_time=caml_sys_time(0);
        if(next_move_step[1] < new_time - last_move_time[1])
         {last_move_time[1] = new_time;
          next_move_step[1] = base_step_length + float$0(1);
          var _qb_=current_scene[1][3];
          switch(difficulty_level[1])
           {case 0:var t$2=create_tree(_qb_,easy_iterations);break;
            case 1:var t$2=create_tree(_qb_,medium_iterations);break;
            default:var t$2=create_tree(_qb_,hard_iterations)}
          var _pM_=t$2[1];
          if(0 === _pM_[0])
           var children=[0];
          else
           var chldrn=_pM_[5],children=chldrn;
          var
           _pN_=caml_check_bound(children,0)[1],
           child=
            fold_left$0
             (function(acc,child)
               {var b=win_pctg(acc),a=win_pctg(child),_qZ_=b + float$0(1e-05);
                return _qZ_ < a + float$0(1e-05)?child:acc},
              _pN_,
              children),
           _pO_=child[1];
          if(0 === _pO_[0])
           var cm=_pO_[1],cm$1=cm;
          else
           var cm$0=_pO_[2],cm$1=cm$0;
          var
           init$0=current_scene[1],
           _qc_=init$0[8],
           _qd_=init$0[7],
           _qe_=init$0[6],
           _qf_=init$0[5],
           _qg_=init$0[4],
           _qh_=new_state_plus_delta(current_scene[1][3],cm$1,delta[1]);
          current_scene[1]
          =
          [0,init$0[1],init$0[2],_qh_,_qg_,_qf_,_qe_,_qd_,_qc_]}
        var
         _qi_=current_scene[1][3],
         mana=_qi_[9],
         kill_cost=lightning_skill[2],
         health_cost=freeze_skill[2];
        if(kill_cost < mana)
         {var _p9_=lightning_skill[3];
          if(2 === _p9_[0])var n=_p9_[1],kill_n=n;else var kill_n=0;
          var
           _p__=_qi_[1],
           _p$_=-1,
           kill_index=
            fold_left$0
             (function(acc,e)
               {if(e[6] + 2 < kill_n)if(0 === e[9])return e[1];return acc},
              _p$_,
              _p__);
          if(-1 === kill_index)
           if(health_cost < mana)
            var
             _qa_=_qi_[1],
             health_index=
              fold_left$0
               (function(param,e)
                 {var troops=param[2],indx=param[1];
                  if(troops < e[7])if(1 === e[9])return [0,e[1],e[7]];
                  return [0,indx,troops]},
                _pf_,
                _qa_),
             spell_cm=
              [1,
               [0,
                1,
                health_skill[2],
                health_skill[3],
                health_skill[4],
                health_index[1],
                health_skill[6],
                health_skill[7]]];
           else
            var spell_cm=0;
          else
           var
            spell_cm=
             [1,
              [0,
               1,
               lightning_skill[2],
               lightning_skill[3],
               lightning_skill[4],
               kill_index,
               lightning_skill[6],
               lightning_skill[7]]]}
        else
         var spell_cm=0;
        var
         init$1=current_scene[1],
         _qj_=init$1[8],
         _qk_=init$1[7],
         _ql_=init$1[6],
         _qm_=init$1[5],
         _qn_=init$1[4],
         _qo_=new_state_plus_delta(current_scene[1][3],spell_cm,0);
        current_scene[1]
        =
        [0,init$1[1],init$1[2],_qo_,_qn_,_qm_,_ql_,_qk_,_qj_];
        var scene$0=current_scene[1];
        switch(prev_mouse_state[1])
         {case 0:
           switch(scene$0[5][2])
            {case 0:var _pT_=2;break;
             case 1:var _pT_=1;break;
             default:var _pT_=2}
           var new_mouse_state=_pT_;
           break;
          case 1:
           switch(scene$0[5][2])
            {case 0:var _pU_=0;break;
             case 1:var _pU_=2;break;
             default:var _pU_=2}
           var new_mouse_state=_pU_;
           break;
          default:
           switch(scene$0[5][2])
            {case 0:var _pV_=0;break;
             case 1:var _pV_=1;break;
             default:var _pV_=2}
           var new_mouse_state=_pV_}
        prev_mouse_state[1] = scene$0[5][2];
        current_scene[1][5] = [0,scene$0[5][1],new_mouse_state];
        var scene=current_scene[1];
        switch(scene[5][2])
         {case 0:
           var
            _pS_=
             _a_(_o6_,_a_(string_of_float(current_scene[1][5][1][2]),_o5_));
           print_endline
            (_a_(_a_(_o7_,string_of_float(current_scene[1][5][1][1])),_pS_));
           break;
          case 1:break
          }
        var _qp_=current_scene[1][5],_qq_=current_scene[1][4];
        iter
         (function(param)
           {var uref=param[2],_qY_=uref[1];
            switch(_qY_[0])
             {case 0:
               var nsc=_qY_[4],size=_qY_[3],pos=_qY_[2],prop=_qY_[1];
               if(0 === prop[1])return 0;
               if(point_inside(_qp_[1],pos,size))
                if(1 === _qp_[2])
                 prop[1] = 3;
                else
                 {var switch$0=0 === _qp_[2]?0:2 === prop[1]?0:1;
                  if(!switch$0)prop[1] = 2}
               else
                prop[1] = 1;
               uref[1] = [0,prop,pos,size,nsc];
               return 0;
              case 1:
               var size$0=_qY_[3],pos$0=_qY_[2],label_prop=_qY_[1];
               uref[1] = [1,label_prop,pos$0,size$0];
               return 0;
              case 2:
               var
                size$1=_qY_[3],
                pos$1=_qY_[2],
                sprite=_qY_[1],
                new_sprite=tick(sprite,delta[1]);
               uref[1] = [2,new_sprite,pos$1,size$1];
               return 0;
              default:return 0}},
          _qq_);
        current_scene[1][4] = _qq_;
        if(0 < length(current_scene[1][2]))
         if(0 === hd(current_scene[1][2]))
          {var _qr_=current_scene[1],_pz_=_qr_[1];
           if(caml_string_notequal(_pz_,_fp_))
            if(caml_string_notequal(_pz_,_fq_))
             var
              _pA_=_qr_[4],
              _pB_=0,
              next_scene_id=
               fold_left
                (function(acc,param)
                  {var ui_ref=param[2],_qU_=ui_ref[1];
                   if(0 === _qU_[0])
                    {var _qV_=_qU_[4];
                     if(_qV_)
                      {var scid=_qV_[1],bprop=_qU_[1];
                       return 3 === bprop[1]?[0,scid]:acc}}
                   return acc},
                 _pB_,
                 _pA_);
            else
             var
              _pC_=_qr_[4],
              _pD_=0,
              next_scene_id=
               fold_left
                (function(acc,param)
                  {var ui_ref=param[2],id=param[1],_qW_=ui_ref[1];
                   if(0 === _qW_[0])
                    {var _qX_=_qW_[4];
                     if(_qX_)
                      {var scid=_qX_[1],bprop=_qW_[1];
                       if(3 === bprop[1])
                        {difficulty_level[1]
                         =
                         caml_string_equal(id,_fr_)?0:caml_string_equal(id,_fs_)?1:2;
                         return [0,scid]}
                       return acc}}
                   return acc},
                 _pD_,
                 _pC_);
           else
            {if(0 === _qr_[3][3])
              if(contains_troops_with_team(_qr_[3],0))
               var switch$1=0;
              else
               {print_endline(_fu_);var next_scene_id=_fv_,switch$1=1}
             else
              var switch$1=0;
             if(!switch$1)
              {if(0 === _qr_[3][4])
                if(contains_troops_with_team(_qr_[3],1))
                 var switch$2=0;
                else
                 var next_scene_id=_ft_,switch$2=1;
               else
                var switch$2=0;
               if(!switch$2)var next_scene_id=0}}
           if(next_scene_id)
            {var nxt=next_scene_id[1];
             print_endline(_a_(_pb_,nxt));
             if(caml_string_equal(nxt,_pc_))
              if(-1 === map_index[1])
               var switch$3=0;
              else
               var
                _pR_=map_index[1],
                tasks=
                 [0,
                  [0,4,caml_check_bound(maps,_pR_)[_pR_ + 1][2]],
                  [0,fade_out_alpha_0_5,0]],
                switch$3=1;
             else
              var switch$3=0;
             if(!switch$3)var tasks=[0,fade_out,0];
             var
              init=current_scene[1],
              _pW_=init[8],
              _pX_=init[7],
              _pY_=init[6],
              _pZ_=init[5],
              _p0_=init[4],
              _p1_=init[3],
              _p2_=append(tasks,[0,[3,nxt],0]);
             current_scene[1] = [0,init[1],_p2_,_p1_,_p0_,_pZ_,_pY_,_pX_,_pW_]}
           var
            _qs_=current_scene[1][5],
            _qt_=current_scene[1],
            _pI_=_qt_[3][1],
            updated_towers=
             map$0
              (function(t)
                {var
                  _qL_=t[12],
                  _qM_=t[11],
                  _qN_=t[10],
                  _qO_=t[9],
                  _qP_=t[8],
                  _qQ_=t[7],
                  _qR_=t[6],
                  _qS_=t[5],
                  _qT_=tick(t[4],delta[1]);
                 return [0,
                         t[1],
                         t[2],
                         t[3],
                         _qT_,
                         _qS_,
                         _qR_,
                         _qQ_,
                         _qP_,
                         _qO_,
                         _qN_,
                         _qM_,
                         _qL_]},
               _pI_),
            command=[0,0],
            _pE_=_qt_[4];
           iter
            (function(param)
              {var uref=param[2],id=param[1],_qI_=uref[1];
               if(3 === _qI_[0])
                {var skill=_qI_[4],size=_qI_[3],pos=_qI_[2],prop=_qI_[1];
                 print_endline(_a_(_fw_,id));
                 if(2 === prop[1])
                  {var
                    _qJ_=skill[4],
                    timer=
                     [254,skill[4][1] + delta[1] * skill[4][2],_qJ_[2],_qJ_[3]];
                   if(timer[3] <= timer[1])
                    {var reset_timer=[254,0,timer[2],timer[3]];
                     prop[1] = 0;
                     uref[1]
                     =
                     [3,
                      prop,
                      pos,
                      size,
                      [0,
                       skill[1],
                       skill[2],
                       skill[3],
                       reset_timer,
                       skill[5],
                       skill[6],
                       skill[7]]]}
                   else
                    uref[1]
                    =
                    [3,
                     prop,
                     pos,
                     size,
                     [0,
                      skill[1],
                      skill[2],
                      skill[3],
                      timer,
                      skill[5],
                      skill[6],
                      skill[7]]]}
                 else
                  if((_qt_[3][8] | 0) < skill[2])
                   {prop[1] = 3;uref[1] = [3,prop,pos,size,skill]}
                  else
                   {var
                     switch$0=
                      0 === prop[1]
                       ?point_inside(_qs_[1],pos,size)
                         ?0 === _qs_[2]
                           ?(prop[1] = 1,uref[1] = [3,prop,pos,size,skill],1)
                           :0
                         :0
                       :0;
                    if(!switch$0)
                     if(1 === prop[1])
                      {if(1 === _qs_[2])
                        {var
                          _qK_=_qt_[3][1],
                          _qH_=0,
                          tidopt=
                           fold_left$0
                            (function(acc,t)
                              {return 0 === acc
                                       ?point_inside(_qs_[1],t[2],t[3])?[0,t[1]]:0
                                       :acc},
                             _qH_,
                             _qK_);
                         if(tidopt)
                          {var tid=tidopt[1];
                           prop[1] = 2;
                           uref[1] = [3,prop,pos,size,skill];
                           command[1]
                           =
                           [1,[0,0,skill[2],skill[3],skill[4],tid,skill[6],skill[7]]]}
                         else
                          {prop[1] = 0;uref[1] = [3,prop,pos,size,skill]}}
                       else
                        if(2 === _qs_[2])
                         {prop[1] = 1;uref[1] = [3,prop,pos,size,skill]}}
                     else
                      {prop[1] = 0;uref[1] = [3,prop,pos,size,skill]}}
                 return 0}
               return 0},
             _pE_);
           var command$0=[0,command[1]];
           switch(_qs_[2])
            {case 0:
              var _pF_=_qt_[3][1];
              iter$0
               (function(t)
                 {return point_inside(_qs_[1],t[2],t[3])
                          ?(_qt_[6] = [0,t[1],_qt_[6]],destination[2] = [0,t[1]],0)
                          :0},
                _pF_);
              break;
             case 1:
              _qt_[6] = 0;
              var _pH_=_qt_[3][1];
              iter$0
               (function(t)
                 {if(point_inside(_qs_[1],t[2],t[3]))
                   {destination[1] = [0,t[1]];
                    var _qF_=destination[2],_qG_=destination[1];
                    if(_qF_)
                     if(_qG_)
                      {var b=_qG_[1],a=_qF_[1];command$0[1] = [0,0,a,b];return 0}
                    return 0}
                  return 0},
                _pH_);
              destination[2] = 0;
              destination[1] = 0;
              break
             }
           var
            _pG_=command$0[1],
            pmana=update_mana(_qt_[3],0),
            emana=update_mana(_qt_[3],1),
            _pJ_=_qt_[3],
            state=
             [0,
              updated_towers,
              _pJ_[2],
              _pJ_[3],
              _pJ_[4],
              _pJ_[5],
              _pJ_[6],
              _pJ_[7],
              pmana,
              emana],
            ans_state=new_state_plus_delta(state,_pG_,delta[1]),
            match$0=find_ui_ref(_qt_[4],_fx_);
           if(match$0)
            {var ref_fps_label=match$0[1],_pK_=caml_new_string("" + fps[1]);
             get_label_prop(ref_fps_label[1])[1] = _pK_}
           var match$1=find_ui_ref(_qt_[4],_fy_);
           if(match$1)
            {var
              ref_mana_label=match$1[1],
              _pL_=_a_(_fz_,caml_new_string("" + (_qt_[3][8] | 0)));
             get_label_prop(ref_mana_label[1])[1] = _pL_}
           current_scene[1][3] = ans_state;
           var switch$0=1}
         else
          var switch$0=0;
        else
         var switch$0=0;
        var _qu_=current_scene[1];
        delta[1] = time[1] - last_update_time[1];
        last_update_time[1] = time[1];
        if(1 < time_count[1])
         {fps[1] = frames_count[1];time_count[1] = 0;frames_count[1] = 0}
        else
         {time_count[1] = time_count[1] + delta[1];
          frames_count[1] = frames_count[1] + 1 | 0}
        context.clearRect(0,0,1080,680);
        context.fillStyle = color_to_hex(_fb_);
        draw_sprite_sheet(context,_qu_[8],_fc_,[254,width,height]);
        var _pr_=_qu_[3][5];
        iter
         (function(mvmt)
           {if(!(0.975 < mvmt[6]))
             if(!(mvmt[6] < 0.025))
              {var
                _qE_=_qu_[3],
                ts_index=mvmt[1],
                te_index=mvmt[2],
                ts=caml_check_bound(_qE_[1],ts_index)[ts_index + 1],
                te=caml_check_bound(_qE_[1],te_index)[te_index + 1],
                progress=mvmt[6],
                start_vector=add_vector2d(ts[2],ts[10]),
                end_vector=add_vector2d(te[2],te[10]),
                _qC_=scalar_mult_vector2d(progress,end_vector),
                _qD_=
                 add_vector2d
                  (scalar_mult_vector2d(1 - progress,start_vector),_qC_),
                vec=add_vector2d([254,0,-1 * size[2] / 2],_qD_),
                x=vec[1] + 25 - 15,
                y=vec[2] + 10;
               draw_sprite_sheet(context,mvmt[4],vec,size);
               draw_sprite_sheet
                (context,mvmt_troop_count_sprite,[254,x,y - 25],[254,30,20]);
               return draw_text
                       (context,
                        caml_new_string("" + mvmt[3]),
                        [254,x + 7.5,y + 15 - 25],
                        color,
                        15)}
            return 0},
          _pr_);
        var _ps_=_qu_[3][1];
        iter$0
         (function(t)
           {var param=_qu_[6],_qx_=t[1];
            for(;;)
             {if(param)
               {var l=param[2],a=param[1],_qw_=0 === caml_compare(a,_qx_)?1:0;
                if(!_qw_){var param=l;continue}
                var _qy_=_qw_}
              else
               var _qy_=0;
              if(_qy_)
               {var
                 _qz_=[254,t[3][1] * 2,t[3][1]],
                 _qA_=add_vector2d(t[10],t[2]);
                draw_sprite_sheet
                 (context,
                  tower_highlight,
                  add_vector2d([254,-1 * (t[3][1] / 2),-25],_qA_),
                  _qz_)}
              var pos=add_vector2d(t[2],t[11]);
              switch(t[9])
               {case 0:var match=_e__;break;
                case 1:var match=_e$_;break;
                default:var match=_fa_}
              var
               index=match[2],
               color=match[1],
               _qB_=t[4],
               spr=[0,_qB_[1],_qB_[2],index,_qB_[4],_qB_[5]];
              draw_sprite_sheet(context,spr,t[2],t[3]);
              return 2 === t[9]
                      ?0
                      :(draw_sprite_sheet
                         (context,tower_troop_count_sprite,pos,[254,30,20]),
                        draw_text
                         (context,
                          caml_new_string("" + (t[6] | 0)),
                          [254,pos[1] + 7.5,pos[2] + 15],
                          color,
                          15))}},
          _ps_);
        var _pt_=_qu_[3][6];
        if(_pt_)
         {var
           skl=_pt_[1],
           _pu_=skl[5],
           tower=caml_check_bound(_qu_[3][1],_pu_)[_pu_ + 1];
          draw_sprite_sheet(context,skl[6],tower[2],tower[3])}
        var _pv_=_qu_[3][7];
        if(_pv_)
         {var
           skl$0=_pv_[1],
           _pw_=skl$0[5],
           tower$0=caml_check_bound(_qu_[3][1],_pw_)[_pw_ + 1];
          draw_sprite_sheet(context,skl$0[6],tower$0[2],tower$0[3])}
        draw_ui(context,_qu_[4]);
        var _qv_=current_scene[1],_px_=_qv_[2];
        if(_px_)
         {var _py_=_px_[1];
          if(typeof _py_ === "number")
           var switch$4=0;
          else
           switch(_py_[0])
            {case 3:var switch$4=0;break;
             case 0:
              var t=_px_[2],interface$1=_py_[2],time$0=_py_[1];
              _qv_[2] = 0 < time$0?[0,[0,time$0 - delta[1],interface$1],t]:t;
              var switch$4=1;
              break;
             case 1:
              var t$0=_px_[2],amag$1=_py_[3],lim$1=_py_[2],cur$1=_py_[1];
              if(lim$1 <= cur$1)
               _qv_[2] = t$0;
              else
               {var cur$2=cur$1 + delta[1] * 1;
                _qv_[2] = [0,[1,cur$2,lim$1,amag$1],t$0]}
              var switch$4=1;
              break;
             default:
              var t$1=_px_[2],amag$2=_py_[3],lim$2=_py_[2],cur$3=_py_[1];
              if(lim$2 <= cur$3)
               _qv_[2] = t$1;
              else
               {var cur$4=cur$3 + delta[1] * 1;
                _qv_[2] = [0,[2,cur$4,lim$2,amag$2],t$1]}
              var switch$4=1}}
        else
         {print_endline(_fh_);_qv_[2] = _fi_}
        if(0 < length(_qv_[2]))
         {var match=hd(_qv_[2]);
          if(typeof match !== "number")
           switch(match[0])
            {case 0:
              var interface$0=match[2];
              context.fillStyle = color_to_hex(_fd_);
              context.fillRect(0,0,1080,680);
              draw_text(context,_ff_,[254,440,100],_fe_,40);
              draw_ui(context,interface$0);
              break;
             case 1:
              var
               amag=match[3],
               lim=match[2],
               cur=match[1],
               percent_done=cur / lim,
               alpha=[0,(1 - percent_done) * amag];
              if(alpha[1] <= 0)alpha[1] = 0;
              context.fillStyle = color_to_hex([0,0,0,0,alpha[1]]);
              context.fillRect(0,0,1080,680);
              break;
             case 2:
              var
               amag$0=match[3],
               lim$0=match[2],
               cur$0=match[1],
               percent_done$0=cur$0 / lim$0,
               alpha$0=[0,percent_done$0 * amag$0];
              if(alpha$0[1] <= 0)alpha$0[1] = 0;
              context.fillStyle = color_to_hex([0,0,0,0,alpha$0[1]]);
              context.fillRect(0,0,1080,680);
              break;
             default:
              context.fillStyle = color_to_hex(_fg_);
              context.fillRect(0,0,1080,680)}}
        current_scene[1] = _qv_;
        if(0 < length(current_scene[1][2]))
         {var match$2=hd(current_scene[1][2]);
          if(typeof match$2 === "number")
           var switch$5=0;
          else
           if(3 === match$2[0])
            {var nxt$0=match$2[1];
             if(caml_string_equal(nxt$0,_pd_))
              if((maps.length - 1 - 1 | 0) <= map_index[1])
               {var next_scene=get_scene_from_name(_pe_);
                current_scene[1] = next_scene;
                var _p3_=current_scene[1];
                current_scene[1]
                =
                [0,
                 _p3_[1],
                 [0,fade_in,0],
                 _p3_[3],
                 _p3_[4],
                 _p3_[5],
                 _p3_[6],
                 _p3_[7],
                 _p3_[8]]}
              else
               {var
                 _p4_=game_scene[8],
                 _p5_=game_scene[7],
                 _p6_=game_scene[6],
                 _p7_=game_scene[5],
                 _p8_=game_scene[4];
                map_index[1] = map_index[1] + 1 | 0;
                var
                 _pP_=map_index[1],
                 _pQ_=caml_check_bound(maps,_pP_)[_pP_ + 1][1];
                current_scene[1]
                =
                [0,game_scene[1],[0,fade_in,0],_pQ_,_p8_,_p7_,_p6_,_p5_,_p4_]}
             else
              {map_index[1] = -1;
               var next_scene$0=get_scene_from_name(nxt$0);
               current_scene[1]
               =
               [0,
                next_scene$0[1],
                [0,fade_in,0],
                next_scene$0[3],
                next_scene$0[4],
                next_scene$0[5],
                next_scene$0[6],
                next_scene$0[7],
                next_scene$0[8]]}
             var switch$5=1}
           else
            var switch$5=0}
        window.requestAnimationFrame
         (caml_js_wrap_callback
           (function(t){time[1] = t / 1e3;return helper(0)}));
        return 0}
      return helper(0)}
    main(0);
    do_at_exit(0);
    return}
  (function(){return this}()));
